{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nexport var TypingContext = React.createContext(undefined);\nexport var TypingProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(TypingContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useTypingContext = function (componentName) {\n  var contextValue = useContext(TypingContext);\n\n  if (!contextValue) {\n    console.warn(\"The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withTypingContext = function (Component) {\n  var WithTypingContextComponent = function (props) {\n    var typingContext = useTypingContext();\n    return React.createElement(Component, __assign({}, props, typingContext));\n  };\n\n  WithTypingContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithTypingContextComponent;\n};","map":null,"metadata":{},"sourceType":"module"}