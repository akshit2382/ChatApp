{"ast":null,"code":"import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useTypingContext } from '../../context/TypingContext';\n/**\n * TypingIndicator lists users currently typing, it needs to be a child of Channel component\n */\n\nvar UnMemoizedTypingIndicator = function (props) {\n  var PropAvatar = props.Avatar,\n      _a = props.avatarSize,\n      avatarSize = _a === void 0 ? 32 : _a,\n      threadList = props.threadList;\n\n  var _b = useChannelStateContext('TypingIndicator'),\n      channelConfig = _b.channelConfig,\n      thread = _b.thread;\n\n  var client = useChatContext('TypingIndicator').client;\n  var ContextAvatar = useComponentContext('TypingIndicator').Avatar;\n  var _c = useTypingContext('TypingIndicator').typing,\n      typing = _c === void 0 ? {} : _c;\n  var Avatar = PropAvatar || ContextAvatar || DefaultAvatar;\n\n  if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {\n    return null;\n  }\n\n  var typingInChannel = !threadList ? Object.values(typing).filter(function (_a) {\n    var _b;\n\n    var parent_id = _a.parent_id,\n        user = _a.user;\n    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && !parent_id;\n  }) : [];\n  var typingInThread = threadList ? Object.values(typing).filter(function (_a) {\n    var _b;\n\n    var parent_id = _a.parent_id,\n        user = _a.user;\n    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);\n  }) : [];\n  return React.createElement(\"div\", {\n    className: \"str-chat__typing-indicator \" + (threadList && typingInThread.length || !threadList && typingInChannel.length ? 'str-chat__typing-indicator--typing' : '')\n  }, React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__avatars'\n  }, (threadList ? typingInThread : typingInChannel).map(function (_a, i) {\n    var user = _a.user;\n    return React.createElement(Avatar, {\n      image: user === null || user === void 0 ? void 0 : user.image,\n      key: (user === null || user === void 0 ? void 0 : user.id) + \"-\" + i,\n      name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id),\n      size: avatarSize,\n      user: user\n    });\n  })), React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__dots'\n  }, React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  })));\n};\n\nexport var TypingIndicator = React.memo(UnMemoizedTypingIndicator);","map":null,"metadata":{},"sourceType":"module"}