{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Suspense, useMemo, useState } from 'react';\nimport { getStrippedEmojiData } from '../Channel/emojiData';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedSimpleReactionsList = function (props) {\n  var _a = props.additionalEmojiProps,\n      additionalEmojiProps = _a === void 0 ? {} : _a,\n      propHandleReaction = props.handleReaction,\n      propReactionCounts = props.reaction_counts,\n      propReactionOptions = props.reactionOptions,\n      propReactions = props.reactions;\n\n  var _b = useEmojiContext('SimpleReactionsList'),\n      Emoji = _b.Emoji,\n      emojiConfig = _b.emojiConfig;\n\n  var _c = useMessageContext('SimpleReactionsList'),\n      contextHandleReaction = _c.handleReaction,\n      message = _c.message;\n\n  var _d = emojiConfig || {},\n      defaultMinimalEmojis = _d.defaultMinimalEmojis,\n      fullEmojiData = _d.emojiData,\n      emojiSetDef = _d.emojiSetDef;\n\n  var _e = useState(undefined),\n      tooltipReactionType = _e[0],\n      setTooltipReactionType = _e[1];\n\n  var handleReaction = propHandleReaction || contextHandleReaction;\n  var reactions = propReactions || message.latest_reactions || [];\n  var reactionCounts = propReactionCounts || message.reaction_counts || {};\n  var reactionOptions = propReactionOptions || defaultMinimalEmojis;\n  var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);\n  var emojiData = useMemo(function () {\n    return reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData);\n  }, [fullEmojiData, reactionsAreCustom]);\n  if (!reactions.length) return null;\n\n  var getUsersPerReactionType = function (type) {\n    return reactions.map(function (reaction) {\n      var _a, _b;\n\n      if (reaction.type === type) {\n        return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);\n      }\n\n      return null;\n    }).filter(Boolean);\n  };\n\n  var getTotalReactionCount = function () {\n    return Object.values(reactionCounts).reduce(function (total, count) {\n      return total + count;\n    }, 0);\n  };\n\n  var getCurrentMessageReactionTypes = function () {\n    var reactionTypes = [];\n    reactions.forEach(function (_a) {\n      var type = _a.type;\n\n      if (reactionTypes.indexOf(type) === -1) {\n        reactionTypes.push(type);\n      }\n    });\n    return reactionTypes;\n  };\n\n  var getEmojiByReactionType = function (type) {\n    var reactionEmoji = reactionOptions.find(function (option) {\n      return option.id === type;\n    });\n    return reactionEmoji;\n  };\n\n  var getSupportedReactionMap = function () {\n    var reactionMap = {};\n    reactionOptions.forEach(function (_a) {\n      var id = _a.id;\n      return reactionMap[id] = true;\n    });\n    return reactionMap;\n  };\n\n  var messageReactionTypes = getCurrentMessageReactionTypes();\n  var supportedReactionMap = getSupportedReactionMap();\n  var supportedReactionsArePresent = messageReactionTypes.some(function (type) {\n    return supportedReactionMap[type];\n  });\n  if (!supportedReactionsArePresent) return null;\n  return React.createElement(\"ul\", {\n    className: 'str-chat__simple-reactions-list',\n    \"data-testid\": 'simple-reaction-list',\n    onMouseLeave: function () {\n      return setTooltipReactionType(undefined);\n    }\n  }, messageReactionTypes.map(function (reactionType, i) {\n    var _a;\n\n    var emojiObject = getEmojiByReactionType(reactionType);\n    return emojiObject ? React.createElement(\"li\", {\n      className: 'str-chat__simple-reactions-list-item',\n      key: emojiObject.id + \"-\" + i,\n      onClick: function (event) {\n        return handleReaction(reactionType, event);\n      },\n      onKeyPress: function (event) {\n        return handleReaction(reactionType, event);\n      }\n    }, React.createElement(\"span\", {\n      onMouseEnter: function () {\n        return setTooltipReactionType(reactionType);\n      }\n    }, React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(Emoji, __assign({\n      data: emojiData,\n      emoji: emojiObject,\n      size: 13\n    }, reactionsAreCustom ? additionalEmojiProps : emojiSetDef))), \"\\u00A0\"), tooltipReactionType === emojiObject.id && React.createElement(\"div\", {\n      className: 'str-chat__simple-reactions-list-tooltip'\n    }, React.createElement(\"div\", {\n      className: 'arrow'\n    }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 : _a.join(', '))) : null;\n  }), React.createElement(\"li\", {\n    className: 'str-chat__simple-reactions-list-item--last-number'\n  }, getTotalReactionCount()));\n};\n\nexport var SimpleReactionsList = React.memo(UnMemoizedSimpleReactionsList);","map":null,"metadata":{},"sourceType":"module"}