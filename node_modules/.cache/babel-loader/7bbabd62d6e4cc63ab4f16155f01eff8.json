{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useRef } from 'react';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { areMessageUIPropsEqual, messageHasAttachments, messageHasReactions } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';\nimport { MML } from '../MML';\nimport { Modal } from '../Modal';\nimport { ReactionsList as DefaultReactionList, ReactionSelector as DefaultReactionSelector } from '../Reactions';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar MessageSimpleWithContext = function (props) {\n  var _a;\n\n  var additionalMessageInputProps = props.additionalMessageInputProps,\n      clearEditingState = props.clearEditingState,\n      editing = props.editing,\n      endOfGroup = props.endOfGroup,\n      firstOfGroup = props.firstOfGroup,\n      groupedByUser = props.groupedByUser,\n      handleAction = props.handleAction,\n      handleOpenThread = props.handleOpenThread,\n      handleRetry = props.handleRetry,\n      isMyMessage = props.isMyMessage,\n      isReactionEnabled = props.isReactionEnabled,\n      message = props.message,\n      onUserClick = props.onUserClick,\n      onUserHover = props.onUserHover,\n      reactionSelectorRef = props.reactionSelectorRef,\n      showDetailedReactions = props.showDetailedReactions,\n      threadList = props.threadList;\n\n  var _b = useComponentContext('MessageSimple'),\n      Attachment = _b.Attachment,\n      _c = _b.Avatar,\n      Avatar = _c === void 0 ? DefaultAvatar : _c,\n      _d = _b.EditMessageInput,\n      EditMessageInput = _d === void 0 ? DefaultEditMessageForm : _d,\n      _e = _b.MessageDeleted,\n      MessageDeleted = _e === void 0 ? DefaultMessageDeleted : _e,\n      _f = _b.MessageOptions,\n      MessageOptions = _f === void 0 ? DefaultMessageOptions : _f,\n      _g = _b.MessageRepliesCountButton,\n      MessageRepliesCountButton = _g === void 0 ? DefaultMessageRepliesCountButton : _g,\n      _h = _b.MessageStatus,\n      MessageStatus = _h === void 0 ? DefaultMessageStatus : _h,\n      _j = _b.MessageTimestamp,\n      MessageTimestamp = _j === void 0 ? DefaultMessageTimestamp : _j,\n      _k = _b.ReactionSelector,\n      ReactionSelector = _k === void 0 ? DefaultReactionSelector : _k,\n      _l = _b.ReactionsList,\n      ReactionsList = _l === void 0 ? DefaultReactionList : _l;\n\n  var messageWrapperRef = useRef(null);\n  var hasAttachment = messageHasAttachments(message);\n  var hasReactions = messageHasReactions(message);\n  var messageClasses = isMyMessage() ? 'str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me' : 'str-chat__message str-chat__message-simple';\n\n  if (message.customType === 'message.date') {\n    return null;\n  }\n\n  if (message.deleted_at || message.type === 'deleted') {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n\n  return React.createElement(React.Fragment, null, editing && React.createElement(Modal, {\n    onClose: clearEditingState,\n    open: editing\n  }, React.createElement(MessageInput, __assign({\n    clearEditingState: clearEditingState,\n    Input: EditMessageInput,\n    message: message\n  }, additionalMessageInputProps))), React.createElement(\"div\", {\n    className: (\"\\n\\t\\t\\t\\t\\t\\t\" + messageClasses + \"\\n\\t\\t\\t\\t\\t\\tstr-chat__message--\" + message.type + \"\\n\\t\\t\\t\\t\\t\\tstr-chat__message--\" + message.status + \"\\n\\t\\t\\t\\t\\t\\t\" + (message.text ? 'str-chat__message--has-text' : 'has-no-text') + \"\\n\\t\\t\\t\\t\\t\\t\" + (hasAttachment ? 'str-chat__message--has-attachment' : '') + \"\\n            \" + (hasReactions && isReactionEnabled ? 'str-chat__message--with-reactions' : '') + \"\\n            \" + (message.pinned ? 'pinned-message' : '') + \"\\n            \" + (groupedByUser ? 'str-chat__virtual-message__wrapper--group' : '') + \"\\n            \" + (firstOfGroup ? 'str-chat__virtual-message__wrapper--first' : '') + \"\\n            \" + (endOfGroup ? 'str-chat__virtual-message__wrapper--end' : '') + \"\\n\\t\\t\\t\\t\\t\").trim(),\n    key: message.id,\n    ref: messageWrapperRef\n  }, React.createElement(MessageStatus, null), message.user && React.createElement(Avatar, {\n    image: message.user.image,\n    name: message.user.name || message.user.id,\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    user: message.user\n  }), React.createElement(\"div\", {\n    className: 'str-chat__message-inner',\n    \"data-testid\": 'message-inner',\n    onClick: message.status === 'failed' && message.errorStatusCode !== 403 ? function () {\n      return handleRetry(message);\n    } : undefined,\n    onKeyPress: message.status === 'failed' && message.errorStatusCode !== 403 ? function () {\n      return handleRetry(message);\n    } : undefined\n  }, React.createElement(React.Fragment, null, React.createElement(MessageOptions, {\n    messageWrapperRef: messageWrapperRef\n  }), hasReactions && !showDetailedReactions && isReactionEnabled && React.createElement(ReactionsList, {\n    reverse: true\n  }), showDetailedReactions && isReactionEnabled && React.createElement(ReactionSelector, {\n    ref: reactionSelectorRef\n  })), ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) && !message.quoted_message ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, React.createElement(MessageText, {\n    message: message\n  }), message.mml && React.createElement(MML, {\n    actionHandler: handleAction,\n    align: isMyMessage() ? 'right' : 'left',\n    source: message.mml\n  }), !threadList && !!message.reply_count && React.createElement(\"div\", {\n    className: 'str-chat__message-simple-reply-button'\n  }, React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  })), (!groupedByUser || endOfGroup) && React.createElement(\"div\", {\n    className: \"str-chat__message-data str-chat__message-simple-data\"\n  }, !isMyMessage() && message.user ? React.createElement(\"span\", {\n    className: 'str-chat__message-simple-name'\n  }, message.user.name || message.user.id) : null, React.createElement(MessageTimestamp, {\n    calendar: true,\n    customClass: 'str-chat__message-simple-timestamp'\n  })))));\n};\n\nvar MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\n\nexport var MessageSimple = function (props) {\n  var messageContext = useMessageContext('MessageSimple');\n  return React.createElement(MemoizedMessageSimple, __assign({}, messageContext, props));\n};","map":null,"metadata":{},"sourceType":"module"}