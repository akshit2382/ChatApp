{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageTimestamp as DefaultTimestamp } from './MessageTimestamp';\nimport { useReactionClick } from './hooks';\nimport { PinIndicator as DefaultPinIndicator, ErrorIcon, ReactionIcon, ThreadIcon } from './icons';\nimport { QuotedMessage as DefaultQuotedMessage } from './QuotedMessage';\nimport { areMessageUIPropsEqual, MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { MessageActions } from '../MessageActions';\nimport { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';\nimport { ReactionSelector as DefaultReactionSelector, SimpleReactionsList as DefaultReactionsList } from '../Reactions';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { renderText as defaultRenderText, isOnlyEmojis } from '../../utils';\n\nvar MessageLivestreamWithContext = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  var clearEditingState = props.clearEditingState,\n      editing = props.editing,\n      groupStyles = props.groupStyles,\n      handleAction = props.handleAction,\n      handleOpenThread = props.handleOpenThread,\n      handleRetry = props.handleRetry,\n      initialMessage = props.initialMessage,\n      isReactionEnabled = props.isReactionEnabled,\n      message = props.message,\n      messageWrapperRef = props.messageWrapperRef,\n      onMentionsClickMessage = props.onMentionsClickMessage,\n      onMentionsHoverMessage = props.onMentionsHoverMessage,\n      onReactionListClick = props.onReactionListClick,\n      onUserClick = props.onUserClick,\n      onUserHover = props.onUserHover,\n      reactionSelectorRef = props.reactionSelectorRef,\n      _l = props.renderText,\n      renderText = _l === void 0 ? defaultRenderText : _l,\n      showDetailedReactions = props.showDetailedReactions,\n      unsafeHTML = props.unsafeHTML;\n\n  var _m = useComponentContext('MessageLivestream'),\n      Attachment = _m.Attachment,\n      _o = _m.Avatar,\n      Avatar = _o === void 0 ? DefaultAvatar : _o,\n      _p = _m.EditMessageInput,\n      EditMessageInput = _p === void 0 ? DefaultEditMessageForm : _p,\n      _q = _m.MessageDeleted,\n      MessageDeleted = _q === void 0 ? DefaultMessageDeleted : _q,\n      _r = _m.MessageRepliesCountButton,\n      MessageRepliesCountButton = _r === void 0 ? DefaultMessageRepliesCountButton : _r,\n      _s = _m.PinIndicator,\n      PinIndicator = _s === void 0 ? DefaultPinIndicator : _s,\n      _t = _m.QuotedMessage,\n      QuotedMessage = _t === void 0 ? DefaultQuotedMessage : _t,\n      _u = _m.ReactionsList,\n      ReactionsList = _u === void 0 ? DefaultReactionsList : _u,\n      _v = _m.ReactionSelector,\n      ReactionSelector = _v === void 0 ? DefaultReactionSelector : _v;\n\n  var _w = useTranslationContext('MessageLivestream'),\n      t = _w.t,\n      userLanguage = _w.userLanguage;\n\n  var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + \"_text\"]) || message.text;\n  var messageText = useMemo(function () {\n    return renderText(messageTextToRender, message.mentioned_users);\n  }, [message.mentioned_users, messageTextToRender]);\n  var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';\n\n  if (message.customType === 'message.date') {\n    return null;\n  }\n\n  if (message.deleted_at) {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n\n  if (editing) {\n    return React.createElement(\"div\", {\n      className: \"str-chat__message-team str-chat__message-team--\" + firstGroupStyle + \" str-chat__message-team--editing\",\n      \"data-testid\": 'message-livestream-edit'\n    }, (firstGroupStyle === 'top' || firstGroupStyle === 'single') && React.createElement(\"div\", {\n      className: 'str-chat__message-team-meta'\n    }, React.createElement(Avatar, {\n      image: (_b = message.user) === null || _b === void 0 ? void 0 : _b.image,\n      name: ((_c = message.user) === null || _c === void 0 ? void 0 : _c.name) || ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id),\n      onClick: onUserClick,\n      onMouseOver: onUserHover,\n      size: 40\n    })), React.createElement(MessageInput, {\n      clearEditingState: clearEditingState,\n      Input: EditMessageInput,\n      message: message\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, message.pinned && React.createElement(\"div\", {\n    className: 'str-chat__message-livestream-pin-indicator'\n  }, React.createElement(PinIndicator, {\n    message: message,\n    t: t\n  })), React.createElement(\"div\", {\n    className: \"str-chat__message-livestream str-chat__message-livestream--\" + firstGroupStyle + \" str-chat__message-livestream--\" + message.type + \" str-chat__message-livestream--\" + message.status + \" \" + (initialMessage ? 'str-chat__message-livestream--initial-message' : '') + \" \" + (message.pinned ? 'pinned-message' : ''),\n    \"data-testid\": 'message-livestream',\n    ref: messageWrapperRef\n  }, showDetailedReactions && isReactionEnabled && React.createElement(ReactionSelector, {\n    ref: reactionSelectorRef\n  }), React.createElement(MessageLivestreamActions, {\n    messageWrapperRef: messageWrapperRef,\n    onReactionListClick: onReactionListClick\n  }), React.createElement(\"div\", {\n    className: 'str-chat__message-livestream-left'\n  }, React.createElement(Avatar, {\n    image: (_e = message.user) === null || _e === void 0 ? void 0 : _e.image,\n    name: ((_f = message.user) === null || _f === void 0 ? void 0 : _f.name) || ((_g = message.user) === null || _g === void 0 ? void 0 : _g.id),\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    size: 30\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message-livestream-right'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-livestream-content'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-livestream-author'\n  }, React.createElement(\"strong\", null, ((_h = message.user) === null || _h === void 0 ? void 0 : _h.name) || ((_j = message.user) === null || _j === void 0 ? void 0 : _j.id)), message.type === 'error' && React.createElement(\"div\", {\n    className: 'str-chat__message-team-error-header'\n  }, t('Only visible to you'))), React.createElement(\"div\", {\n    className: isOnlyEmojis(message.text) ? 'str-chat__message-livestream-text--is-emoji' : '',\n    \"data-testid\": 'message-livestream-text',\n    onClick: onMentionsClickMessage,\n    onMouseOver: onMentionsHoverMessage\n  }, message.quoted_message && React.createElement(\"div\", {\n    className: 'livestream-quoted-message'\n  }, React.createElement(QuotedMessage, null)), message.type !== 'error' && message.status !== 'failed' && !unsafeHTML && messageText, message.type !== 'error' && message.status !== 'failed' && unsafeHTML && !!message.html && React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: message.html\n    }\n  }), message.type === 'error' && !message.command && React.createElement(\"p\", {\n    \"data-testid\": 'message-livestream-error'\n  }, React.createElement(ErrorIcon, null), message.text), message.type === 'error' && message.command && React.createElement(\"p\", {\n    \"data-testid\": 'message-livestream-command-error'\n  }, React.createElement(ErrorIcon, null), React.createElement(\"strong\", null, \"/\", message.command), \" is not a valid command\"), message.status === 'failed' && React.createElement(\"p\", {\n    onClick: message.errorStatusCode !== 403 ? function () {\n      return handleRetry(message);\n    } : undefined\n  }, React.createElement(ErrorIcon, null), message.errorStatusCode !== 403 ? t('Message Failed · Click to try again') : t('Message Failed · Unauthorized'))), ((_k = message.attachments) === null || _k === void 0 ? void 0 : _k.length) ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, isReactionEnabled && React.createElement(ReactionsList, null), !initialMessage && React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  })))));\n};\n\nvar MessageLivestreamActions = function (props) {\n  var messageWrapperRef = props.messageWrapperRef,\n      onReactionListClick = props.onReactionListClick;\n  var _a = useComponentContext('MessageLivestream').MessageTimestamp,\n      MessageTimestamp = _a === void 0 ? DefaultTimestamp : _a;\n\n  var _b = useMessageContext('MessageLivestream'),\n      getMessageActions = _b.getMessageActions,\n      handleOpenThread = _b.handleOpenThread,\n      initialMessage = _b.initialMessage,\n      message = _b.message,\n      threadList = _b.threadList;\n\n  var _c = useState(false),\n      actionsBoxOpen = _c[0],\n      setActionsBoxOpen = _c[1];\n\n  var hideOptions = useCallback(function () {\n    return setActionsBoxOpen(false);\n  }, []);\n  var messageDeletedAt = !!message.deleted_at;\n  var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions);\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;\n  useEffect(function () {\n    if (messageWrapper) {\n      messageWrapper.addEventListener('mouseleave', hideOptions);\n    }\n\n    return function () {\n      if (messageWrapper) {\n        messageWrapper.removeEventListener('mouseleave', hideOptions);\n      }\n    };\n  }, [messageWrapper, hideOptions]);\n  useEffect(function () {\n    if (messageDeletedAt) {\n      document.removeEventListener('click', hideOptions);\n    }\n  }, [messageDeletedAt, hideOptions]);\n  useEffect(function () {\n    if (actionsBoxOpen) {\n      document.addEventListener('click', hideOptions);\n    } else {\n      document.removeEventListener('click', hideOptions);\n    }\n\n    return function () {\n      document.removeEventListener('click', hideOptions);\n    };\n  }, [actionsBoxOpen, hideOptions]);\n\n  if (initialMessage || !message || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending') {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-livestream-actions\",\n    \"data-testid\": 'message-livestream-actions'\n  }, React.createElement(MessageTimestamp, {\n    customClass: 'str-chat__message-livestream-time'\n  }), shouldShowReactions && React.createElement(\"span\", {\n    \"data-testid\": 'message-livestream-reactions-action',\n    onClick: onReactionListClick\n  }, React.createElement(\"span\", null, React.createElement(ReactionIcon, null))), shouldShowReplies && React.createElement(\"span\", {\n    \"data-testid\": 'message-livestream-thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, null)), showActionsBox && React.createElement(MessageActions, {\n    inline: true\n  }));\n};\n\nvar MemoizedMessageLivestream = React.memo(MessageLivestreamWithContext, areMessageUIPropsEqual);\n/**\n * @deprecated - This UI component will be removed in the next major release.\n *\n * Handles the rendering of a message and depends on the Message component for all the logic.\n * Implements the look and feel for a livestream use case.\n */\n\nexport var MessageLivestream = function (props) {\n  var messageContext = useMessageContext('MessageLivestream');\n  var messageWrapperRef = useRef(null);\n  var reactionSelectorRef = useRef(null);\n  var message = props.message || messageContext.message;\n\n  var _a = useReactionClick(message, reactionSelectorRef, messageWrapperRef),\n      isReactionEnabled = _a.isReactionEnabled,\n      onReactionListClick = _a.onReactionListClick,\n      showDetailedReactions = _a.showDetailedReactions;\n\n  return React.createElement(MemoizedMessageLivestream, __assign({}, messageContext, {\n    isReactionEnabled: isReactionEnabled,\n    messageWrapperRef: messageWrapperRef,\n    onReactionListClick: onReactionListClick,\n    reactionSelectorRef: reactionSelectorRef,\n    showDetailedReactions: showDetailedReactions\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}