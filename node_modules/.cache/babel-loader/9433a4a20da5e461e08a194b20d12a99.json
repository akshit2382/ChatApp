{"ast":null,"code":"import React, { useCallback, useEffect, useState } from 'react';\nimport { isChannel } from './utils';\nimport { Avatar } from '../Avatar/Avatar';\nimport { useBreakpoint } from '../Message/hooks/useBreakpoint';\nimport { useTranslationContext } from '../../context/TranslationContext';\n\nvar DefaultDropdownContainer = function (props) {\n  var focusedUser = props.focusedUser,\n      results = props.results,\n      _a = props.SearchResultItem,\n      SearchResultItem = _a === void 0 ? DefaultSearchResultItem : _a,\n      selectResult = props.selectResult;\n  return React.createElement(React.Fragment, null, results.map(function (result, index) {\n    return React.createElement(SearchResultItem, {\n      focusedUser: focusedUser,\n      index: index,\n      key: index,\n      result: result,\n      selectResult: selectResult\n    });\n  }));\n};\n\nvar DefaultSearchResultItem = function (props) {\n  var _a, _b;\n\n  var focusedUser = props.focusedUser,\n      index = props.index,\n      result = props.result,\n      selectResult = props.selectResult;\n  var focused = focusedUser === index;\n\n  if (isChannel(result)) {\n    var channel_1 = result;\n    return React.createElement(\"button\", {\n      \"aria-label\": \"Select Channel: \" + (((_a = channel_1.data) === null || _a === void 0 ? void 0 : _a.name) || ''),\n      className: \"str-chat__channel-search-result \" + (focused ? 'focused' : ''),\n      onClick: function () {\n        return selectResult(channel_1);\n      }\n    }, React.createElement(\"div\", {\n      className: 'result-hashtag'\n    }, \"#\"), React.createElement(\"p\", {\n      className: 'channel-search__result-text'\n    }, (_b = channel_1.data) === null || _b === void 0 ? void 0 : _b.name));\n  } else {\n    return React.createElement(\"button\", {\n      \"aria-label\": \"Select User Channel: \" + (result.name || ''),\n      className: \"str-chat__channel-search-result \" + (focused ? 'focused' : ''),\n      onClick: function () {\n        return selectResult(result);\n      }\n    }, React.createElement(Avatar, {\n      image: result.image,\n      user: result\n    }), result.name || result.id);\n  }\n};\n\nexport var SearchResults = function (props) {\n  var _a = props.DropdownContainer,\n      DropdownContainer = _a === void 0 ? DefaultDropdownContainer : _a,\n      popupResults = props.popupResults,\n      results = props.results,\n      searching = props.searching,\n      SearchEmpty = props.SearchEmpty,\n      SearchResultsHeader = props.SearchResultsHeader,\n      SearchLoading = props.SearchLoading,\n      _b = props.SearchResultItem,\n      SearchResultItem = _b === void 0 ? DefaultSearchResultItem : _b,\n      selectResult = props.selectResult;\n  var t = useTranslationContext('SearchResults').t;\n\n  var _c = useState(),\n      focusedUser = _c[0],\n      setFocusedUser = _c[1];\n\n  var device = useBreakpoint().device;\n  var containerStyle = popupResults && device === 'full' ? 'popup' : 'inline';\n\n  var ResultsContainer = function (_a) {\n    var children = _a.children;\n    return React.createElement(\"div\", {\n      className: \"str-chat__channel-search-container \" + containerStyle\n    }, children);\n  };\n\n  var handleKeyDown = useCallback(function (event) {\n    if (event.key === 'ArrowUp') {\n      setFocusedUser(function (prevFocused) {\n        if (prevFocused === undefined) return 0;\n        return prevFocused === 0 ? results.length - 1 : prevFocused - 1;\n      });\n    }\n\n    if (event.key === 'ArrowDown') {\n      setFocusedUser(function (prevFocused) {\n        if (prevFocused === undefined) return 0;\n        return prevFocused === results.length - 1 ? 0 : prevFocused + 1;\n      });\n    }\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (focusedUser !== undefined) {\n        selectResult(results[focusedUser]);\n        return setFocusedUser(undefined);\n      }\n    }\n  }, [focusedUser]);\n  useEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  if (searching) {\n    return React.createElement(ResultsContainer, null, SearchLoading ? React.createElement(SearchLoading, null) : React.createElement(\"div\", {\n      className: 'str-chat__channel-search-container-searching'\n    }, t('Searching...')));\n  }\n\n  if (!results.length) {\n    return React.createElement(ResultsContainer, null, SearchEmpty ? React.createElement(SearchEmpty, null) : React.createElement(\"div\", {\n      \"aria-live\": 'polite',\n      className: 'str-chat__channel-search-container-empty'\n    }, t('No results found')));\n  }\n\n  return React.createElement(ResultsContainer, null, SearchResultsHeader && React.createElement(SearchResultsHeader, null), React.createElement(DropdownContainer, {\n    focusedUser: focusedUser,\n    results: results,\n    SearchResultItem: SearchResultItem,\n    selectResult: selectResult\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}