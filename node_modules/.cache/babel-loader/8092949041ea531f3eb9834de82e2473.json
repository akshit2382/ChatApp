{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useMemo, useRef } from 'react';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus } from './MessageStatus';\nimport { MessageTimestamp as DefaultTimestamp } from './MessageTimestamp';\nimport { useReactionClick } from './hooks';\nimport { PinIndicator as DefaultPinIndicator, ErrorIcon, ReactionIcon, ThreadIcon } from './icons';\nimport { QuotedMessage as DefaultQuotedMessage } from './QuotedMessage';\nimport { areMessageUIPropsEqual, MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { MessageActions } from '../MessageActions';\nimport { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';\nimport { MML } from '../MML';\nimport { ReactionSelector as DefaultReactionSelector, SimpleReactionsList as DefaultReactionsList } from '../Reactions';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { renderText as defaultRenderText, isOnlyEmojis } from '../../utils';\n\nvar MessageTeamWithContext = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n  var clearEditingState = props.clearEditingState,\n      editing = props.editing,\n      getMessageActions = props.getMessageActions,\n      groupStyles = props.groupStyles,\n      handleAction = props.handleAction,\n      handleOpenThread = props.handleOpenThread,\n      handleRetry = props.handleRetry,\n      initialMessage = props.initialMessage,\n      isReactionEnabled = props.isReactionEnabled,\n      message = props.message,\n      messageWrapperRef = props.messageWrapperRef,\n      onMentionsClickMessage = props.onMentionsClickMessage,\n      onMentionsHoverMessage = props.onMentionsHoverMessage,\n      onReactionListClick = props.onReactionListClick,\n      onUserClick = props.onUserClick,\n      onUserHover = props.onUserHover,\n      reactionSelectorRef = props.reactionSelectorRef,\n      _o = props.renderText,\n      renderText = _o === void 0 ? defaultRenderText : _o,\n      showDetailedReactions = props.showDetailedReactions,\n      threadList = props.threadList,\n      unsafeHTML = props.unsafeHTML;\n\n  var _p = useComponentContext('MessageTeam'),\n      Attachment = _p.Attachment,\n      _q = _p.Avatar,\n      Avatar = _q === void 0 ? DefaultAvatar : _q,\n      _r = _p.EditMessageInput,\n      EditMessageInput = _r === void 0 ? DefaultEditMessageForm : _r,\n      _s = _p.MessageDeleted,\n      MessageDeleted = _s === void 0 ? DefaultMessageDeleted : _s,\n      _t = _p.MessageRepliesCountButton,\n      MessageRepliesCountButton = _t === void 0 ? DefaultMessageRepliesCountButton : _t,\n      _u = _p.MessageTimestamp,\n      MessageTimestamp = _u === void 0 ? DefaultTimestamp : _u,\n      _v = _p.PinIndicator,\n      PinIndicator = _v === void 0 ? DefaultPinIndicator : _v,\n      _w = _p.QuotedMessage,\n      QuotedMessage = _w === void 0 ? DefaultQuotedMessage : _w,\n      _x = _p.ReactionsList,\n      ReactionsList = _x === void 0 ? DefaultReactionsList : _x,\n      _y = _p.ReactionSelector,\n      ReactionSelector = _y === void 0 ? DefaultReactionSelector : _y;\n\n  var _z = useTranslationContext('MessageTeam'),\n      t = _z.t,\n      userLanguage = _z.userLanguage;\n\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions);\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;\n  var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + \"_text\"]) || message.text;\n  var messageMentionedUsersItem = message.mentioned_users;\n  var messageText = useMemo(function () {\n    return renderText(messageTextToRender, messageMentionedUsersItem);\n  }, [messageMentionedUsersItem, messageTextToRender]);\n  var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';\n\n  if (message.deleted_at) {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n\n  if (editing) {\n    return React.createElement(\"div\", {\n      className: \"str-chat__message-team str-chat__message-team--\" + firstGroupStyle + \" str-chat__message-team--editing\",\n      \"data-testid\": 'message-team-edit'\n    }, (firstGroupStyle === 'top' || firstGroupStyle === 'single') && React.createElement(\"div\", {\n      className: 'str-chat__message-team-meta'\n    }, React.createElement(Avatar, {\n      image: (_b = message.user) === null || _b === void 0 ? void 0 : _b.image,\n      name: ((_c = message.user) === null || _c === void 0 ? void 0 : _c.name) || ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id),\n      onClick: onUserClick,\n      onMouseOver: onUserHover,\n      size: 40\n    })), React.createElement(MessageInput, {\n      clearEditingState: clearEditingState,\n      Input: EditMessageInput,\n      message: message\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, message.pinned && React.createElement(\"div\", {\n    className: 'str-chat__message-team-pin-indicator'\n  }, React.createElement(PinIndicator, {\n    message: message,\n    t: t\n  })), React.createElement(\"div\", {\n    className: \"str-chat__message-team str-chat__message-team--\" + firstGroupStyle + \" str-chat__message-team--\" + message.type + \" \" + (threadList ? 'thread-list' : '') + \" str-chat__message-team--\" + message.status + \" \" + (message.pinned ? 'pinned-message' : ''),\n    \"data-testid\": 'message-team',\n    ref: messageWrapperRef\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-team-meta'\n  }, firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage ? React.createElement(Avatar, {\n    image: (_e = message.user) === null || _e === void 0 ? void 0 : _e.image,\n    name: ((_f = message.user) === null || _f === void 0 ? void 0 : _f.name) || ((_g = message.user) === null || _g === void 0 ? void 0 : _g.id),\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    size: 40\n  }) : React.createElement(\"div\", {\n    \"data-testid\": 'team-meta-spacer',\n    style: {\n      marginRight: 0,\n      width: 40\n    }\n  }), React.createElement(MessageTimestamp, null)), React.createElement(\"div\", {\n    className: 'str-chat__message-team-group'\n  }, (firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage) && React.createElement(\"div\", {\n    className: 'str-chat__message-team-author',\n    \"data-testid\": 'message-team-author',\n    onClick: onUserClick\n  }, React.createElement(\"strong\", null, ((_h = message.user) === null || _h === void 0 ? void 0 : _h.name) || ((_j = message.user) === null || _j === void 0 ? void 0 : _j.id)), message.type === 'error' && React.createElement(\"div\", {\n    className: 'str-chat__message-team-error-header'\n  }, t('Only visible to you'))), React.createElement(\"div\", {\n    className: \"str-chat__message-team-content str-chat__message-team-content--\" + firstGroupStyle + \" str-chat__message-team-content--\" + (message.text === '' ? 'image' : 'text'),\n    \"data-testid\": 'message-team-content'\n  }, message.quoted_message && React.createElement(QuotedMessage, null), !initialMessage && message.status !== 'sending' && message.status !== 'failed' && message.type !== 'system' && message.type !== 'ephemeral' && message.type !== 'error' && React.createElement(\"div\", {\n    className: \"str-chat__message-team-actions\",\n    \"data-testid\": 'message-team-actions'\n  }, showDetailedReactions && React.createElement(ReactionSelector, {\n    ref: reactionSelectorRef\n  }), isReactionEnabled && React.createElement(\"span\", {\n    \"data-testid\": 'message-team-reaction-icon',\n    onClick: onReactionListClick,\n    title: 'Reactions'\n  }, React.createElement(ReactionIcon, null)), shouldShowReplies && React.createElement(\"span\", {\n    \"data-testid\": 'message-team-thread-icon',\n    onClick: handleOpenThread,\n    title: 'Start a thread'\n  }, React.createElement(ThreadIcon, null)), showActionsBox && React.createElement(MessageActions, {\n    inline: true,\n    messageWrapperRef: messageWrapperRef\n  })), React.createElement(\"span\", {\n    className: isOnlyEmojis(message.text) ? 'str-chat__message-team-text--is-emoji' : '',\n    \"data-testid\": 'message-team-message',\n    onClick: onMentionsClickMessage,\n    onMouseOver: onMentionsHoverMessage\n  }, unsafeHTML && message.html ? React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: message.html\n    }\n  }) : messageText), message.mml && React.createElement(MML, {\n    actionHandler: handleAction,\n    align: 'left',\n    source: message.mml\n  }), !message.text && ((_k = message.attachments) === null || _k === void 0 ? void 0 : _k.length) ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, ((_l = message.latest_reactions) === null || _l === void 0 ? void 0 : _l.length) !== 0 && message.text !== '' && isReactionEnabled && React.createElement(ReactionsList, null), message.status === 'failed' && React.createElement(\"button\", {\n    className: 'str-chat__message-team-failed',\n    \"data-testid\": 'message-team-failed',\n    onClick: message.errorStatusCode !== 403 ? function () {\n      return handleRetry(message);\n    } : undefined\n  }, React.createElement(ErrorIcon, null), message.errorStatusCode !== 403 ? t('Message Failed · Click to try again') : t('Message Failed · Unauthorized'))), React.createElement(MessageStatus, {\n    messageType: 'team'\n  }), message.text && ((_m = message.attachments) === null || _m === void 0 ? void 0 : _m.length) ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, message.latest_reactions && message.latest_reactions.length !== 0 && message.text === '' && isReactionEnabled && React.createElement(ReactionsList, null), !threadList && React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  }))));\n};\n\nvar MemoizedMessageTeam = React.memo(MessageTeamWithContext, areMessageUIPropsEqual);\n/**\n * @deprecated - This UI component will be removed in the next major release.\n *\n * Handles the rendering of a Message and depends on the Message component for all the logic.\n * Implements the look and feel for a team style collaboration environment.\n */\n\nexport var MessageTeam = function (props) {\n  var messageContext = useMessageContext('MessageTeam');\n  var reactionSelectorRef = useRef(null);\n  var messageWrapperRef = useRef(null);\n  var message = props.message || messageContext.message;\n\n  var _a = useReactionClick(message, reactionSelectorRef, messageWrapperRef),\n      isReactionEnabled = _a.isReactionEnabled,\n      onReactionListClick = _a.onReactionListClick,\n      showDetailedReactions = _a.showDetailedReactions;\n\n  return React.createElement(MemoizedMessageTeam, __assign({}, messageContext, {\n    isReactionEnabled: isReactionEnabled,\n    messageWrapperRef: messageWrapperRef,\n    onReactionListClick: onReactionListClick,\n    reactionSelectorRef: reactionSelectorRef,\n    showDetailedReactions: showDetailedReactions\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}