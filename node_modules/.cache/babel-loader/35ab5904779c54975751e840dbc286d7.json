{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useMobilePress } from './hooks';\nimport { QuotedMessage as DefaultQuotedMessage } from './QuotedMessage';\nimport { messageHasAttachments } from './utils';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { renderText as defaultRenderText, isOnlyEmojis } from '../../utils';\n\nvar UnMemoizedMessageTextComponent = function (props) {\n  var _a;\n\n  var customInnerClass = props.customInnerClass,\n      _b = props.customWrapperClass,\n      customWrapperClass = _b === void 0 ? '' : _b,\n      propMessage = props.message,\n      _c = props.theme,\n      theme = _c === void 0 ? 'simple' : _c;\n  var _d = useComponentContext('MessageText').QuotedMessage,\n      QuotedMessage = _d === void 0 ? DefaultQuotedMessage : _d;\n\n  var _e = useMessageContext('MessageText'),\n      contextMessage = _e.message,\n      onMentionsClickMessage = _e.onMentionsClickMessage,\n      onMentionsHoverMessage = _e.onMentionsHoverMessage,\n      _f = _e.renderText,\n      renderText = _f === void 0 ? defaultRenderText : _f,\n      unsafeHTML = _e.unsafeHTML;\n\n  var _g = useTranslationContext('MessageText'),\n      t = _g.t,\n      userLanguage = _g.userLanguage;\n\n  var handleMobilePress = useMobilePress().handleMobilePress;\n  var message = propMessage || contextMessage;\n  var hasAttachment = messageHasAttachments(message);\n  var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + \"_text\"]) || message.text;\n  var messageText = useMemo(function () {\n    return renderText(messageTextToRender, message.mentioned_users);\n  }, [message.mentioned_users, messageTextToRender]);\n  var wrapperClass = customWrapperClass || 'str-chat__message-text';\n  var innerClass = customInnerClass || \"str-chat__message-text-inner str-chat__message-\" + theme + \"-text-inner\";\n  if (!messageTextToRender && !message.quoted_message) return null;\n  return React.createElement(\"div\", {\n    className: wrapperClass\n  }, React.createElement(\"div\", {\n    className: (\"\\n          \" + innerClass + \"\\n          \" + (hasAttachment ? \" str-chat__message-\" + theme + \"-text-inner--has-attachment\" : '') + \"\\n          \" + (isOnlyEmojis(message.text) && !message.quoted_message ? \" str-chat__message-\" + theme + \"-text-inner--is-emoji\" : '') + \"\\n        \").trim(),\n    \"data-testid\": 'message-text-inner-wrapper',\n    onClick: onMentionsClickMessage,\n    onMouseOver: onMentionsHoverMessage\n  }, message.quoted_message && React.createElement(QuotedMessage, null), message.type === 'error' && React.createElement(\"div\", {\n    className: \"str-chat__\" + theme + \"-message--error-message\"\n  }, t('Error · Unsent')), message.status === 'failed' && React.createElement(\"div\", {\n    className: \"str-chat__\" + theme + \"-message--error-message\"\n  }, message.errorStatusCode !== 403 ? t('Message Failed · Click to try again') : t('Message Failed · Unauthorized')), unsafeHTML && message.html ? React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: message.html\n    }\n  }) : React.createElement(\"div\", {\n    onClick: handleMobilePress\n  }, messageText)));\n};\n\nexport var MessageText = React.memo(UnMemoizedMessageTextComponent);","map":null,"metadata":{},"sourceType":"module"}