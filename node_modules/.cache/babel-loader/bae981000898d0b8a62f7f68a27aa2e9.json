{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { escapeRegExp } from '../../utils';\nimport { Item } from './Item';\nimport { DefaultSuggestionListHeader } from './Header';\nimport { KEY_CODES } from './listener';\nexport var List = function (props) {\n  var className = props.className,\n      component = props.component,\n      currentTrigger = props.currentTrigger,\n      dropdownScroll = props.dropdownScroll,\n      getSelectedItem = props.getSelectedItem,\n      getTextToReplace = props.getTextToReplace,\n      PropHeader = props.Header,\n      itemClassName = props.itemClassName,\n      itemStyle = props.itemStyle,\n      onSelect = props.onSelect,\n      selectionEnd = props.selectionEnd,\n      style = props.style,\n      PropSuggestionItem = props.SuggestionItem,\n      propValue = props.value,\n      values = props.values;\n\n  var _a = useComponentContext(),\n      AutocompleteSuggestionHeader = _a.AutocompleteSuggestionHeader,\n      AutocompleteSuggestionItem = _a.AutocompleteSuggestionItem;\n\n  var SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;\n  var SuggestionHeader = PropHeader || AutocompleteSuggestionHeader || DefaultSuggestionListHeader;\n\n  var _b = useState(undefined),\n      selectedItem = _b[0],\n      setSelectedItem = _b[1];\n\n  var itemsRef = [];\n\n  var isSelected = function (item) {\n    return selectedItem === values.findIndex(function (value) {\n      return getId(value) === getId(item);\n    });\n  };\n\n  var getId = function (item) {\n    var textToReplace = getTextToReplace(item);\n\n    if (textToReplace.key) {\n      return textToReplace.key;\n    }\n\n    if (typeof item === 'string' || !item.key) {\n      return textToReplace.text;\n    }\n\n    return item.key;\n  };\n\n  var modifyText = function (value) {\n    if (!value) return;\n    onSelect(getTextToReplace(value));\n    if (getSelectedItem) getSelectedItem(value);\n  };\n\n  var handleClick = function (e) {\n    var _a;\n\n    if (e) (_a = e.preventDefault) === null || _a === void 0 ? void 0 : _a.call(e);\n    modifyText(values[selectedItem]);\n  };\n\n  var selectItem = function (item) {\n    var index = values.findIndex(function (value) {\n      return value.id ? value.id === item.id : value.name === item.name;\n    });\n    setSelectedItem(index);\n  };\n\n  var handleKeyDown = useCallback(function (event) {\n    if (event.which === KEY_CODES.UP) {\n      setSelectedItem(function (prevSelected) {\n        if (prevSelected === undefined) return 0;\n        var newID = prevSelected === 0 ? values.length - 1 : prevSelected - 1;\n        dropdownScroll(itemsRef[newID]);\n        return newID;\n      });\n    }\n\n    if (event.which === KEY_CODES.DOWN) {\n      setSelectedItem(function (prevSelected) {\n        if (prevSelected === undefined) return 0;\n        var newID = prevSelected === values.length - 1 ? 0 : prevSelected + 1;\n        dropdownScroll(itemsRef[newID]);\n        return newID;\n      });\n    }\n\n    if ((event.which === KEY_CODES.ENTER || event.which === KEY_CODES.TAB) && selectedItem !== undefined) {\n      handleClick(event);\n    }\n\n    return null;\n  }, [selectedItem, values]);\n  useEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  useEffect(function () {\n    if (values === null || values === void 0 ? void 0 : values.length) selectItem(values[0]);\n  }, [values]); // eslint-disable-line\n\n  var restructureItem = function (item) {\n    var matched = item.name || item.id;\n    var textBeforeCursor = propValue.slice(0, selectionEnd);\n    var triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);\n    var editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));\n    var parts = matched.split(new RegExp(\"(\" + editedPropValue + \")\", 'gi'));\n    var itemNameParts = {\n      match: editedPropValue,\n      parts: parts\n    };\n    return __assign(__assign({}, item), {\n      itemNameParts: itemNameParts\n    });\n  };\n\n  return React.createElement(\"ul\", {\n    className: \"rta__list \" + (className || ''),\n    style: style\n  }, React.createElement(\"li\", {\n    className: 'rta__list-header'\n  }, React.createElement(SuggestionHeader, {\n    currentTrigger: currentTrigger,\n    value: propValue\n  })), values.map(function (item, i) {\n    return React.createElement(SuggestionItem, {\n      className: itemClassName,\n      component: component,\n      item: restructureItem(item),\n      key: getId(item),\n      onClickHandler: handleClick,\n      onSelectHandler: selectItem,\n      ref: function (ref) {\n        itemsRef[i] = ref;\n      },\n      selected: isSelected(item),\n      style: itemStyle,\n      value: propValue\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}