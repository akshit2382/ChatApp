{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n  var cooldownInterval = props.cooldownInterval,\n      setCooldownRemaining = props.setCooldownRemaining;\n\n  var _a = useState(cooldownInterval),\n      seconds = _a[0],\n      setSeconds = _a[1];\n\n  useEffect(function () {\n    var countdownInterval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else {\n        setCooldownRemaining(0);\n      }\n    }, 1000);\n    return function () {\n      return clearInterval(countdownInterval);\n    };\n  });\n  return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nvar rolesToSkip = {\n  admin: true,\n  channel_moderator: true,\n  moderator: true\n};\n\nvar checkUserRoles = function (globalRole, channelRole) {\n  var skipGlobal = !!rolesToSkip[globalRole];\n  var skipChannel = !!rolesToSkip[channelRole];\n  return skipGlobal || skipChannel;\n};\n\nexport var useCooldownTimer = function () {\n  var _a, _b;\n\n  var client = useChatContext('useCooldownTimer').client;\n  var channel = useChannelStateContext('useCooldownTimer').channel;\n  var cooldownInterval = (channel.data || {}).cooldown;\n\n  var _c = useState(),\n      cooldownRemaining = _c[0],\n      setCooldownRemaining = _c[1];\n\n  var globalRole = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) || '';\n  var channelRole = ((_b = channel.state.members[client.userID || '']) === null || _b === void 0 ? void 0 : _b.role) || '';\n  var skipCooldown = checkUserRoles(globalRole, channelRole);\n  useEffect(function () {\n    var handleEvent = function (event) {\n      var _a;\n\n      if (!skipCooldown && ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n        setCooldownRemaining(cooldownInterval);\n      }\n    };\n\n    if (cooldownInterval) channel.on('message.new', handleEvent);\n    return function () {\n      return channel.off('message.new', handleEvent);\n    };\n  }, [channel.id, cooldownInterval]);\n  return {\n    cooldownInterval: cooldownInterval || 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":null,"metadata":{},"sourceType":"module"}