{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { Thumbnail } from './Thumbnail';\nimport { ThumbnailPlaceholder } from './ThumbnailPlaceholder';\nexport var ImagePreviewer = function (props) {\n  var _a = props.multiple,\n      multiple = _a === void 0 ? true : _a,\n      _b = props.disabled,\n      disabled = _b === void 0 ? false : _b,\n      imageUploads = props.imageUploads,\n      handleRemove = props.handleRemove,\n      handleRetry = props.handleRetry,\n      handleFiles = props.handleFiles;\n  var onClose = useCallback(function (id) {\n    if (handleRemove) {\n      if (id == null) {\n        console.warn(\"id of closed image was undefined, this shouldn't happen\");\n        return;\n      }\n\n      handleRemove(id);\n    }\n  }, [handleRemove]);\n  return React.createElement(\"div\", {\n    className: \"rfu-image-previewer\"\n  }, imageUploads === null || imageUploads === void 0 ? void 0 : imageUploads.map(function (image) {\n    var url = image.url || image.previewUri;\n    return React.createElement(\"div\", {\n      key: image.id,\n      className: \"rfu-image-previewer__image\" + (image.state === 'finished' ? ' rfu-image-previewer__image--loaded' : '')\n    }, image.state === 'failed' && React.createElement(\"button\", {\n      \"aria-label\": \"Retry upload\",\n      className: \"rfu-image-previewer__retry\",\n      dangerouslySetInnerHTML: {\n        __html: '<svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 5.535V2a1 1 0 0 1 2 0v6a1 1 0 0 1-1 1h-6a1 1 0 0 1 0-2h3.638l-2.975-2.653a8 8 0 1 0 1.884 8.32 1 1 0 1 1 1.886.666A10 10 0 1 1 5.175 1.245c3.901-2.15 8.754-1.462 11.88 1.667L20 5.535z\" fill=\"#FFF\" fill-rule=\"nonzero\"/></svg>'\n      },\n      onClick: handleRetry && function () {\n        return handleRetry(image.id);\n      }\n    }), url !== undefined && React.createElement(Thumbnail, {\n      handleClose: onClose,\n      image: url,\n      id: image.id\n    }), image.state === 'uploading' && React.createElement(LoadingIndicator, {\n      backgroundColor: \"rgba(255,255,255,0.1)\",\n      color: \"rgba(255,255,255,0.7)\"\n    }));\n  }), handleFiles && !disabled && React.createElement(ThumbnailPlaceholder, {\n    handleFiles: handleFiles,\n    multiple: multiple\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}