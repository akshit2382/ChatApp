{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport React, { useContext } from 'react'; //@ts-expect-error\n\nimport DefaultEmojiIndex from 'emoji-mart/dist/utils/emoji-index/nimble-emoji-index.js';\nvar DefaultEmoji = React.lazy(function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var emoji;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , import('emoji-mart/dist/components/emoji/nimble-emoji.js')];\n\n        case 1:\n          emoji = _a.sent();\n          return [2\n          /*return*/\n          , {\n            default: emoji.default\n          }];\n      }\n    });\n  });\n});\nvar DefaultEmojiPicker = React.lazy(function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var emojiPicker;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , import('emoji-mart/dist/components/picker/nimble-picker.js')];\n\n        case 1:\n          emojiPicker = _a.sent();\n          return [2\n          /*return*/\n          , {\n            default: emojiPicker.default\n          }];\n      }\n    });\n  });\n});\nexport var EmojiContext = React.createContext(undefined);\nexport var EmojiProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  var _b = value.Emoji,\n      Emoji = _b === void 0 ? DefaultEmoji : _b,\n      emojiConfig = value.emojiConfig,\n      _c = value.EmojiIndex,\n      EmojiIndex = _c === void 0 ? DefaultEmojiIndex : _c,\n      _d = value.EmojiPicker,\n      EmojiPicker = _d === void 0 ? DefaultEmojiPicker : _d;\n  var emojiContextValue = {\n    Emoji: Emoji,\n    emojiConfig: emojiConfig,\n    EmojiIndex: EmojiIndex,\n    EmojiPicker: EmojiPicker\n  };\n  return React.createElement(EmojiContext.Provider, {\n    value: emojiContextValue\n  }, children);\n};\nexport var useEmojiContext = function (componentName) {\n  var contextValue = useContext(EmojiContext);\n\n  if (!contextValue) {\n    console.warn(\"The useEmojiContext hook was called outside of the EmojiContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if EmojiContext\n * typing is desired while using the HOC withEmojiContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withEmojiContext = function (Component) {\n  var WithEmojiContextComponent = function (props) {\n    var componentContext = useEmojiContext();\n    return React.createElement(Component, __assign({}, props, componentContext));\n  };\n\n  WithEmojiContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithEmojiContextComponent;\n};","map":null,"metadata":{},"sourceType":"module"}