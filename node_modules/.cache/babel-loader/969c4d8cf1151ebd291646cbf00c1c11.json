{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport throttle from 'lodash.throttle';\nimport { SearchInput as DefaultSearchInput } from './SearchInput';\nimport { SearchResults } from './SearchResults';\nimport { isChannel } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\n\nvar UnMemoizedChannelSearch = function (props) {\n  var _a = props.channelType,\n      channelType = _a === void 0 ? 'messaging' : _a,\n      DropdownContainer = props.DropdownContainer,\n      onSelectResult = props.onSelectResult,\n      _b = props.popupResults,\n      popupResults = _b === void 0 ? false : _b,\n      SearchEmpty = props.SearchEmpty,\n      _c = props.searchForChannels,\n      searchForChannels = _c === void 0 ? false : _c,\n      searchFunction = props.searchFunction,\n      _d = props.SearchInput,\n      SearchInput = _d === void 0 ? DefaultSearchInput : _d,\n      SearchLoading = props.SearchLoading,\n      searchQueryParams = props.searchQueryParams,\n      SearchResultItem = props.SearchResultItem,\n      SearchResultsHeader = props.SearchResultsHeader;\n\n  var _e = useChatContext('ChannelSearch'),\n      client = _e.client,\n      setActiveChannel = _e.setActiveChannel;\n\n  var _f = useState(''),\n      query = _f[0],\n      setQuery = _f[1];\n\n  var _g = useState([]),\n      results = _g[0],\n      setResults = _g[1];\n\n  var _h = useState(false),\n      resultsOpen = _h[0],\n      setResultsOpen = _h[1];\n\n  var _j = useState(false),\n      searching = _j[0],\n      setSearching = _j[1];\n\n  var inputRef = useRef(null);\n\n  var clearState = function () {\n    setQuery('');\n    setResults([]);\n    setResultsOpen(false);\n    setSearching(false);\n  };\n\n  useEffect(function () {\n    var clickListener = function (event) {\n      var _a;\n\n      if (resultsOpen && event.target instanceof HTMLElement) {\n        var isInputClick = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target);\n\n        if (!isInputClick) {\n          clearState();\n        }\n      }\n    };\n\n    document.addEventListener('click', clickListener);\n    return function () {\n      return document.removeEventListener('click', clickListener);\n    };\n  }, [resultsOpen]);\n\n  var selectResult = function (result) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var newChannel;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!client.userID) return [2\n            /*return*/\n            ];\n            if (!isChannel(result)) return [3\n            /*break*/\n            , 1];\n            setActiveChannel(result);\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            newChannel = client.channel(channelType, {\n              members: [client.userID, result.id]\n            });\n            return [4\n            /*yield*/\n            , newChannel.watch()];\n\n          case 2:\n            _a.sent();\n\n            setActiveChannel(newChannel);\n            _a.label = 3;\n\n          case 3:\n            clearState();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  var getChannels = function (text) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var userResponse, channelResponse, _a, channels, users_1, users, error_1;\n\n      var _b, _c, _d, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            if (!text || searching) return [2\n            /*return*/\n            ];\n            setSearching(true);\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , client.queryUsers(__assign({\n              $or: [{\n                id: {\n                  $autocomplete: text\n                }\n              }, {\n                name: {\n                  $autocomplete: text\n                }\n              }],\n              id: {\n                $ne: client.userID\n              }\n            }, (_b = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _b === void 0 ? void 0 : _b.filters), __assign({\n              id: 1\n            }, (_c = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _c === void 0 ? void 0 : _c.sort), __assign({\n              limit: 8\n            }, (_d = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _d === void 0 ? void 0 : _d.options))];\n\n          case 2:\n            userResponse = _h.sent();\n            if (!searchForChannels) return [3\n            /*break*/\n            , 4];\n            channelResponse = client.queryChannels(__assign({\n              name: {\n                $autocomplete: text\n              }\n            }, (_e = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _e === void 0 ? void 0 : _e.filters), ((_f = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _f === void 0 ? void 0 : _f.sort) || {}, __assign({\n              limit: 5\n            }, (_g = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _g === void 0 ? void 0 : _g.options));\n            return [4\n            /*yield*/\n            , Promise.all([channelResponse, userResponse])];\n\n          case 3:\n            _a = _h.sent(), channels = _a[0], users_1 = _a[1].users;\n            setResults(__spreadArray(__spreadArray([], channels), users_1));\n            setResultsOpen(true);\n            setSearching(false);\n            return [2\n            /*return*/\n            ];\n\n          case 4:\n            return [4\n            /*yield*/\n            , Promise.resolve(userResponse)];\n\n          case 5:\n            users = _h.sent().users;\n            setResults(users);\n            setResultsOpen(true);\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_1 = _h.sent();\n            clearState();\n            console.error(error_1);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            setSearching(false);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  var getChannelsThrottled = throttle(getChannels, 200);\n\n  var onSearch = function (event) {\n    event.preventDefault();\n    setQuery(event.target.value);\n    getChannelsThrottled(event.target.value);\n  };\n\n  var channelSearchParams = {\n    setQuery: setQuery,\n    setResults: setResults,\n    setResultsOpen: setResultsOpen,\n    setSearching: setSearching\n  };\n  return React.createElement(\"div\", {\n    className: 'str-chat__channel-search'\n  }, React.createElement(SearchInput, {\n    channelSearchParams: channelSearchParams,\n    inputRef: inputRef,\n    onSearch: onSearch,\n    query: query,\n    searchFunction: searchFunction\n  }), query && React.createElement(SearchResults, {\n    DropdownContainer: DropdownContainer,\n    popupResults: popupResults,\n    results: results,\n    SearchEmpty: SearchEmpty,\n    searching: searching,\n    SearchLoading: SearchLoading,\n    SearchResultItem: SearchResultItem,\n    SearchResultsHeader: SearchResultsHeader,\n    selectResult: onSelectResult || selectResult\n  }));\n};\n/**\n * The ChannelSearch component makes a query users call and displays the results in a list.\n * Clicking on a list item will navigate you into a channel with the selected user. It can be used\n * on its own or added to the ChannelList component by setting the `showChannelSearch` prop to true.\n */\n\n\nexport var ChannelSearch = React.memo(UnMemoizedChannelSearch);","map":null,"metadata":{},"sourceType":"module"}