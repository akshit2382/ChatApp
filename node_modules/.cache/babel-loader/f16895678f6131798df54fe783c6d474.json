{"ast":null,"code":"import React from 'react';\nimport { DeliveredCheckIcon } from './icons';\nimport { getReadByTooltipText } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { Tooltip } from '../Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\n\nvar UnMemoizedMessageStatus = function (props) {\n  var _a;\n\n  var propAvatar = props.Avatar,\n      _b = props.messageType,\n      messageType = _b === void 0 ? 'simple' : _b;\n  var client = useChatContext('MessageStatus').client;\n  var contextAvatar = useComponentContext('MessageStatus').Avatar;\n\n  var _c = useMessageContext('MessageStatus'),\n      isMyMessage = _c.isMyMessage,\n      lastReceivedId = _c.lastReceivedId,\n      message = _c.message,\n      readBy = _c.readBy,\n      threadList = _c.threadList;\n\n  var t = useTranslationContext('MessageStatus').t;\n  var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n\n  if (!isMyMessage() || message.type === 'error') {\n    return null;\n  }\n\n  var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n\n  if (message.status === 'sending') {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-sending'\n    }, React.createElement(Tooltip, null, t('Sending...')), React.createElement(LoadingIndicator, null));\n  }\n\n  if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {\n    var lastReadUser = readBy.filter(function (item) {\n      var _a;\n\n      return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    })[0];\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-read-by'\n    }, React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)), React.createElement(Avatar, {\n      image: lastReadUser.image,\n      name: lastReadUser.name || lastReadUser.id,\n      size: 15,\n      user: lastReadUser\n    }), readBy.length > 2 && React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status-number\",\n      \"data-testid\": 'message-status-read-by-many'\n    }, readBy.length - 1));\n  }\n\n  if (message.status === 'received' && message.id === lastReceivedId && !threadList) {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-received'\n    }, React.createElement(Tooltip, null, t('Delivered')), React.createElement(DeliveredCheckIcon, null));\n  }\n\n  return null;\n};\n\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);","map":null,"metadata":{},"sourceType":"module"}