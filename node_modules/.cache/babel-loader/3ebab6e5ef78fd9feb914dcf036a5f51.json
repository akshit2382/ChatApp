{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\n\nvar getAttachmentTypeFromMime = function (mime) {\n  if (mime.includes('video/')) return 'video';\n  if (mime.includes('audio/')) return 'audio';\n  return 'file';\n};\n\nexport var useSubmitHandler = function (props, state, dispatch, numberOfUploads) {\n  var clearEditingState = props.clearEditingState,\n      message = props.message,\n      overrideSubmitHandler = props.overrideSubmitHandler,\n      parent = props.parent,\n      publishTypingEvent = props.publishTypingEvent;\n  var attachments = state.attachments,\n      fileOrder = state.fileOrder,\n      fileUploads = state.fileUploads,\n      imageOrder = state.imageOrder,\n      imageUploads = state.imageUploads,\n      mentioned_users = state.mentioned_users,\n      text = state.text;\n  var channel = useChannelStateContext('useSubmitHandler').channel;\n\n  var _a = useChannelActionContext('useSubmitHandler'),\n      addNotification = _a.addNotification,\n      editMessage = _a.editMessage,\n      sendMessage = _a.sendMessage;\n\n  var t = useTranslationContext('useSubmitHandler').t;\n\n  var getAttachmentsFromUploads = function () {\n    var imageAttachments = imageOrder.map(function (id) {\n      return imageUploads[id];\n    }).filter(function (upload) {\n      return upload.state !== 'failed';\n    }).filter(function (_a, _, self) {\n      var id = _a.id,\n          url = _a.url;\n      return self.every(function (upload) {\n        return upload.id === id || upload.url !== url;\n      });\n    }).map(function (upload) {\n      return {\n        fallback: upload.file.name,\n        image_url: upload.url,\n        type: 'image'\n      };\n    });\n    var fileAttachments = fileOrder.map(function (id) {\n      return fileUploads[id];\n    }).filter(function (upload) {\n      return upload.state !== 'failed';\n    }).map(function (upload) {\n      return {\n        asset_url: upload.url,\n        file_size: upload.file.size,\n        mime_type: upload.file.type,\n        title: upload.file.name,\n        type: getAttachmentTypeFromMime(upload.file.type || '')\n      };\n    });\n    return __spreadArray(__spreadArray(__spreadArray([], attachments), imageAttachments), fileAttachments);\n  };\n\n  var handleSubmit = function (event, customMessageData) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var trimmedMessage, isEmptyMessage, someAttachmentsUploading, newAttachments, actualMentionedUsers, updatedMessage, err_1, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            event.preventDefault();\n            trimmedMessage = text.trim();\n            isEmptyMessage = trimmedMessage === '' || trimmedMessage === '>' || trimmedMessage === '``````' || trimmedMessage === '``' || trimmedMessage === '**' || trimmedMessage === '____' || trimmedMessage === '__' || trimmedMessage === '****';\n            if (isEmptyMessage && numberOfUploads === 0) return [2\n            /*return*/\n            ];\n            someAttachmentsUploading = Object.values(imageUploads).some(function (upload) {\n              return upload.state === 'uploading';\n            }) || Object.values(fileUploads).some(function (upload) {\n              return upload.state === 'uploading';\n            });\n\n            if (someAttachmentsUploading) {\n              return [2\n              /*return*/\n              , addNotification(t('Wait until all attachments have uploaded'), 'error')];\n            }\n\n            newAttachments = getAttachmentsFromUploads();\n            actualMentionedUsers = Array.from(new Set(mentioned_users.filter(function (_a) {\n              var id = _a.id,\n                  name = _a.name;\n              return text.includes(\"@\" + id) || text.includes(\"@\" + name);\n            })));\n            updatedMessage = {\n              attachments: newAttachments,\n              mentioned_users: actualMentionedUsers,\n              text: text\n            };\n            if (!message) return [3\n            /*break*/\n            , 5];\n            delete message.i18n;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , editMessage(__assign(__assign({}, message), updatedMessage))];\n\n          case 2:\n            _a.sent();\n\n            if (clearEditingState) clearEditingState();\n            dispatch({\n              type: 'clear'\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent();\n            addNotification(t('Edit message request failed'), 'error');\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [3\n            /*break*/\n            , 12];\n\n          case 5:\n            _a.trys.push([5, 11,, 12]);\n\n            dispatch({\n              type: 'clear'\n            });\n            if (!overrideSubmitHandler) return [3\n            /*break*/\n            , 6];\n            overrideSubmitHandler(__assign(__assign({}, updatedMessage), {\n              parent: parent\n            }), channel.cid);\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , sendMessage(__assign(__assign({}, updatedMessage), {\n              parent: parent\n            }), customMessageData)];\n\n          case 7:\n            _a.sent();\n\n            _a.label = 8;\n\n          case 8:\n            if (!publishTypingEvent) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , channel.stopTyping()];\n\n          case 9:\n            _a.sent();\n\n            _a.label = 10;\n\n          case 10:\n            return [3\n            /*break*/\n            , 12];\n\n          case 11:\n            err_2 = _a.sent();\n            dispatch({\n              getNewText: function () {\n                return text;\n              },\n              type: 'setText'\n            });\n\n            if (actualMentionedUsers.length) {\n              actualMentionedUsers.forEach(function (user) {\n                dispatch({\n                  type: 'addMentionedUser',\n                  user: user\n                });\n              });\n            }\n\n            addNotification(t('Send message request failed'), 'error');\n            return [3\n            /*break*/\n            , 12];\n\n          case 12:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return {\n    handleSubmit: handleSubmit\n  };\n};","map":null,"metadata":{},"sourceType":"module"}