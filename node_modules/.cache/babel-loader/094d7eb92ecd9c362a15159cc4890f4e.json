{"ast":null,"code":"/* eslint-disable */\nexport var KEY_CODES = {\n  ESC: 27,\n  UP: 38,\n  DOWN: 40,\n  ENTER: 13,\n  TAB: 9,\n  SPACE: 32\n};\nvar keycodeMap = {}; // This is self-made key shortcuts manager, used for caching key strokes\n\nvar Listener =\n/** @class */\nfunction () {\n  function Listener() {\n    var _this = this;\n\n    this.startListen = function () {\n      if (!_this.refCount) {\n        // prevent multiple listeners in case of multiple TextareaAutocomplete components on page\n        document.addEventListener('keydown', _this.f);\n        document.addEventListener('keyup', _this.f);\n      }\n\n      _this.refCount++;\n    };\n\n    this.stopListen = function () {\n      _this.refCount--;\n\n      if (!_this.refCount) {\n        // prevent disable listening in case of multiple TextareaAutocomplete components on page\n        document.removeEventListener('keydown', _this.f);\n        document.removeEventListener('keyup', _this.f);\n      }\n    };\n\n    this.add = function (keyCodes, fn) {\n      var keyCode = keyCodes;\n      if (typeof keyCode !== 'object') keyCode = [keyCode];\n      _this.listeners[_this.index] = {\n        keyCode: keyCode,\n        fn: fn\n      };\n      _this.index += 1;\n      return _this.index;\n    };\n\n    this.remove = function (ids) {\n      for (var _i = 0, _a = Object.entries(ids); _i < _a.length; _i++) {\n        var key = _a[_i];\n        delete _this.listeners[key];\n      }\n    };\n\n    this.removeAll = function () {\n      _this.listeners = {};\n      _this.index = 0;\n    };\n\n    this.index = 0;\n    this.listeners = {};\n    this.refCount = 0;\n\n    this.f = function (e) {\n      var code = e.keyCode || e.which;\n      keycodeMap[code] = e.type === 'keydown';\n\n      if (e.type !== 'keydown') {\n        keycodeMap[code] = false;\n        return;\n      }\n\n      Object.values(_this.listeners).forEach(function (_a) {\n        var keyCode = _a.keyCode,\n            fn = _a.fn;\n\n        if (keyCode.length > 1) {\n          if (keyCode.every(function (keycode) {\n            return keycodeMap[keycode];\n          })) {\n            fn(e);\n          }\n        } else if (keyCode.includes(code) && keycodeMap[code]) {\n          fn(e);\n        }\n      });\n    };\n  }\n\n  return Listener;\n}();\n\nexport default new Listener();","map":null,"metadata":{},"sourceType":"module"}