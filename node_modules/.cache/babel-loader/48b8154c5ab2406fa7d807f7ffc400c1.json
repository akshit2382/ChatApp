{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useReducer, useState } from 'react';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nimport { useEmojiIndex } from './useEmojiIndex';\nimport { useAttachments } from './useAttachments';\nimport { useMessageInputText } from './useMessageInputText';\nimport { useEmojiPicker } from './useEmojiPicker';\nimport { useSubmitHandler } from './useSubmitHandler';\nimport { usePasteHandler } from './usePasteHandler';\nvar emptyFileUploads = {};\nvar emptyImageUploads = {};\n/**\n * Initializes the state. Empty if the message prop is falsy.\n */\n\nvar initState = function (message) {\n  var _a, _b, _c;\n\n  if (!message) {\n    return {\n      attachments: [],\n      emojiPickerIsOpen: false,\n      fileOrder: [],\n      fileUploads: __assign({}, emptyFileUploads),\n      imageOrder: [],\n      imageUploads: __assign({}, emptyImageUploads),\n      mentioned_users: [],\n      setText: function () {\n        return null;\n      },\n      text: ''\n    };\n  } // if message prop is defined, get image uploads, file uploads, text, etc.\n\n\n  var imageUploads = ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.filter(function (_a) {\n    var type = _a.type;\n    return type === 'image';\n  }).reduce(function (acc, attachment) {\n    var id = generateRandomId();\n    acc[id] = {\n      file: {\n        name: attachment.fallback || ''\n      },\n      id: id,\n      state: 'finished',\n      url: attachment.image_url\n    };\n    return acc;\n  }, {})) || {};\n  var imageOrder = Object.keys(imageUploads);\n  var fileUploads = ((_b = message.attachments) === null || _b === void 0 ? void 0 : _b.filter(function (_a) {\n    var type = _a.type;\n    return type === 'file';\n  }).reduce(function (acc, attachment) {\n    var id = generateRandomId();\n    acc[id] = {\n      file: {\n        name: attachment.title || '',\n        size: attachment.file_size,\n        type: attachment.mime_type\n      },\n      id: id,\n      state: 'finished',\n      url: attachment.asset_url\n    };\n    return acc;\n  }, {})) || {};\n  var fileOrder = Object.keys(fileUploads);\n  var attachments = ((_c = message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {\n    var type = _a.type;\n    return type !== 'file' && type !== 'image';\n  })) || [];\n  var mentioned_users = message.mentioned_users || [];\n  return {\n    attachments: attachments,\n    emojiPickerIsOpen: false,\n    fileOrder: fileOrder,\n    fileUploads: fileUploads,\n    imageOrder: imageOrder,\n    imageUploads: imageUploads,\n    mentioned_users: mentioned_users,\n    setText: function () {\n      return null;\n    },\n    text: message.text || ''\n  };\n};\n/**\n * MessageInput state reducer\n */\n\n\nvar messageInputReducer = function (state, action) {\n  var _a, _b;\n\n  switch (action.type) {\n    case 'setEmojiPickerIsOpen':\n      return __assign(__assign({}, state), {\n        emojiPickerIsOpen: action.value\n      });\n\n    case 'setText':\n      return __assign(__assign({}, state), {\n        text: action.getNewText(state.text)\n      });\n\n    case 'clear':\n      return {\n        attachments: [],\n        emojiPickerIsOpen: false,\n        fileOrder: [],\n        fileUploads: __assign({}, emptyFileUploads),\n        imageOrder: [],\n        imageUploads: __assign({}, emptyImageUploads),\n        mentioned_users: [],\n        text: ''\n      };\n\n    case 'setImageUpload':\n      {\n        var imageAlreadyExists = state.imageUploads[action.id];\n        if (!imageAlreadyExists && !action.file) return state;\n        var imageOrder = imageAlreadyExists ? state.imageOrder : state.imageOrder.concat(action.id);\n\n        var newUploadFields = __assign({}, action);\n\n        delete newUploadFields.type;\n        return __assign(__assign({}, state), {\n          imageOrder: imageOrder,\n          imageUploads: __assign(__assign({}, state.imageUploads), (_a = {}, _a[action.id] = __assign(__assign({}, state.imageUploads[action.id]), newUploadFields), _a))\n        });\n      }\n\n    case 'setFileUpload':\n      {\n        var fileAlreadyExists = state.fileUploads[action.id];\n        if (!fileAlreadyExists && !action.file) return state;\n        var fileOrder = fileAlreadyExists ? state.fileOrder : state.fileOrder.concat(action.id);\n\n        var newUploadFields = __assign({}, action);\n\n        delete newUploadFields.type;\n        return __assign(__assign({}, state), {\n          fileOrder: fileOrder,\n          fileUploads: __assign(__assign({}, state.fileUploads), (_b = {}, _b[action.id] = __assign(__assign({}, state.fileUploads[action.id]), newUploadFields), _b))\n        });\n      }\n\n    case 'removeImageUpload':\n      {\n        if (!state.imageUploads[action.id]) return state; // cannot remove anything\n\n        var newImageUploads = __assign({}, state.imageUploads);\n\n        delete newImageUploads[action.id];\n        return __assign(__assign({}, state), {\n          imageOrder: state.imageOrder.filter(function (_id) {\n            return _id !== action.id;\n          }),\n          imageUploads: newImageUploads\n        });\n      }\n\n    case 'removeFileUpload':\n      {\n        if (!state.fileUploads[action.id]) return state; // cannot remove anything\n\n        var newFileUploads = __assign({}, state.fileUploads);\n\n        delete newFileUploads[action.id];\n        return __assign(__assign({}, state), {\n          fileOrder: state.fileOrder.filter(function (_id) {\n            return _id !== action.id;\n          }),\n          fileUploads: newFileUploads\n        });\n      }\n\n    case 'addMentionedUser':\n      return __assign(__assign({}, state), {\n        mentioned_users: state.mentioned_users.concat(action.user)\n      });\n\n    default:\n      return state;\n  }\n};\n/**\n * hook for MessageInput state\n */\n\n\nexport var useMessageInputState = function (props) {\n  var closeEmojiPickerOnClick = props.closeEmojiPickerOnClick,\n      message = props.message;\n\n  var _a = useChannelStateContext('useMessageInputState'),\n      _b = _a.channelCapabilities,\n      channelCapabilities = _b === void 0 ? {} : _b,\n      channelConfig = _a.channelConfig;\n\n  var _c = useReducer(messageInputReducer, message, initState),\n      state = _c[0],\n      dispatch = _c[1];\n\n  var _d = useMessageInputText(props, state, dispatch),\n      handleChange = _d.handleChange,\n      insertText = _d.insertText,\n      textareaRef = _d.textareaRef;\n\n  var _e = useState(false),\n      showCommandsList = _e[0],\n      setShowCommandsList = _e[1];\n\n  var _f = useState(false),\n      showMentionsList = _f[0],\n      setShowMentionsList = _f[1];\n\n  var openCommandsList = function () {\n    dispatch({\n      getNewText: function () {\n        return '/';\n      },\n      type: 'setText'\n    });\n    setShowCommandsList(true);\n  };\n\n  var closeCommandsList = function () {\n    return setShowCommandsList(false);\n  };\n\n  var openMentionsList = function () {\n    dispatch({\n      getNewText: function (currentText) {\n        return currentText + '@';\n      },\n      type: 'setText'\n    });\n    setShowMentionsList(true);\n  };\n\n  var closeMentionsList = function () {\n    return setShowMentionsList(false);\n  };\n\n  var _g = useEmojiPicker(state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick),\n      closeEmojiPicker = _g.closeEmojiPicker,\n      emojiPickerRef = _g.emojiPickerRef,\n      handleEmojiKeyDown = _g.handleEmojiKeyDown,\n      onSelectEmoji = _g.onSelectEmoji,\n      openEmojiPicker = _g.openEmojiPicker;\n\n  var _h = useAttachments(props, state, dispatch, textareaRef),\n      maxFilesLeft = _h.maxFilesLeft,\n      numberOfUploads = _h.numberOfUploads,\n      removeFile = _h.removeFile,\n      removeImage = _h.removeImage,\n      uploadFile = _h.uploadFile,\n      uploadImage = _h.uploadImage,\n      uploadNewFiles = _h.uploadNewFiles;\n\n  var handleSubmit = useSubmitHandler(props, state, dispatch, numberOfUploads).handleSubmit;\n  var onPaste = usePasteHandler(uploadNewFiles, insertText).onPaste;\n  var isUploadEnabled = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.uploads) !== false && channelCapabilities['upload-file'] !== false;\n  var onSelectUser = useCallback(function (item) {\n    dispatch({\n      type: 'addMentionedUser',\n      user: item\n    });\n  }, []);\n  var setText = useCallback(function (text) {\n    dispatch({\n      getNewText: function () {\n        return text;\n      },\n      type: 'setText'\n    });\n  }, []);\n  return __assign(__assign({}, state), {\n    closeCommandsList: closeCommandsList,\n\n    /**\n     * TODO: fix the below at some point because this type casting is wrong\n     * and just forced to not have warnings currently with the unknown casting\n     */\n    closeEmojiPicker: closeEmojiPicker,\n    closeMentionsList: closeMentionsList,\n    emojiIndex: useEmojiIndex(),\n    emojiPickerRef: emojiPickerRef,\n    handleChange: handleChange,\n    handleEmojiKeyDown: handleEmojiKeyDown,\n    handleSubmit: handleSubmit,\n    insertText: insertText,\n    isUploadEnabled: isUploadEnabled,\n    maxFilesLeft: maxFilesLeft,\n    numberOfUploads: numberOfUploads,\n    onPaste: onPaste,\n    onSelectEmoji: onSelectEmoji,\n    onSelectUser: onSelectUser,\n    openCommandsList: openCommandsList,\n    openEmojiPicker: openEmojiPicker,\n    openMentionsList: openMentionsList,\n    removeFile: removeFile,\n    removeImage: removeImage,\n    setText: setText,\n    showCommandsList: showCommandsList,\n    showMentionsList: showMentionsList,\n    textareaRef: textareaRef,\n    uploadFile: uploadFile,\n    uploadImage: uploadImage,\n    uploadNewFiles: uploadNewFiles\n  });\n};","map":null,"metadata":{},"sourceType":"module"}