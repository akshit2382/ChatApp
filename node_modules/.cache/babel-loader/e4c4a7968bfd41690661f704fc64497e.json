{"ast":null,"code":"'use strict';\n\nconst XmlNode = require('./XmlNode');\n/**\nElement in an XML document.\n\n@public\n*/\n\n\nclass XmlElement extends XmlNode {\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  constructor(name, attributes = Object.create(null), children = []) {\n    super();\n    /**\n    Name of this element.\n     @type {string}\n    @public\n    */\n\n    this.name = name;\n    /**\n    Attributes on this element.\n     @type {{[attrName: string]: string}}\n    @public\n    */\n\n    this.attributes = attributes;\n    /**\n    Child nodes of this element.\n     @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n\n    this.children = children;\n  }\n  /**\n  Whether this node is empty (meaning it has no children).\n   @type {boolean}\n  @public\n  */\n\n\n  get isEmpty() {\n    return this.children.length === 0;\n  }\n  /** @type {boolean} */\n\n\n  get preserveWhitespace() {\n    /** @type {XmlNode?} */\n    let node = this;\n\n    while (node instanceof XmlElement) {\n      if ('xml:space' in node.attributes) {\n        return node.attributes['xml:space'] === 'preserve';\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n  /**\n  Text content of this element and all its descendants.\n   @type {string}\n  @public\n  */\n\n\n  get text() {\n    return this.children.map(child => 'text' in child ? child.text : '').join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_ELEMENT;\n  }\n  /** @returns {{[key: string]: any}} */\n\n\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      name: this.name,\n      attributes: this.attributes,\n      children: this.children.map(child => child.toJSON())\n    });\n  }\n\n}\n\nmodule.exports = XmlElement;\n/** @typedef {import('./XmlCdata')} XmlCdata */\n\n/** @typedef {import('./XmlComment')} XmlComment */\n\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n\n/** @typedef {import('./XmlText')} XmlText */","map":null,"metadata":{},"sourceType":"script"}