{"ast":null,"code":"import { useCallback } from 'react';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch, textareaRef) {\n  var noFiles = props.noFiles;\n  var fileUploads = state.fileUploads,\n      imageUploads = state.imageUploads;\n\n  var _a = useChannelStateContext('useAttachments'),\n      maxNumberOfFiles = _a.maxNumberOfFiles,\n      multipleUploads = _a.multipleUploads;\n\n  var _b = useFileUploads(props, state, dispatch),\n      removeFile = _b.removeFile,\n      uploadFile = _b.uploadFile;\n\n  var _c = useImageUploads(props, state, dispatch),\n      removeImage = _c.removeImage,\n      uploadImage = _c.uploadImage; // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n  // If multipleUploads is false, we only want to allow a single upload.\n\n\n  var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n  var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfUploads = numberOfImages + numberOfFiles;\n  var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n  var uploadNewFiles = useCallback(function (files) {\n    var _a;\n\n    Array.from(files).slice(0, maxFilesLeft).forEach(function (file) {\n      var id = generateRandomId();\n\n      if (file.type.startsWith('image/') && !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n      ) {\n          dispatch({\n            file: file,\n            id: id,\n            state: 'uploading',\n            type: 'setImageUpload'\n          });\n        } else if (file instanceof File && !noFiles) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setFileUpload'\n        });\n      }\n    });\n    (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [maxFilesLeft, noFiles]);\n  return {\n    maxFilesLeft: maxFilesLeft,\n    numberOfUploads: numberOfUploads,\n    removeFile: removeFile,\n    removeImage: removeImage,\n    uploadFile: uploadFile,\n    uploadImage: uploadImage,\n    uploadNewFiles: uploadNewFiles\n  };\n};","map":null,"metadata":{},"sourceType":"module"}