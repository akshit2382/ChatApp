{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { MAX_QUERY_CHANNELS_LIMIT } from '../utils';\nexport var usePaginatedChannels = function (client, filters, sort, options, activeChannelHandler) {\n  var _a = useState([]),\n      channels = _a[0],\n      setChannels = _a[1];\n\n  var _b = useState(false),\n      error = _b[0],\n      setError = _b[1];\n\n  var _c = useState(true),\n      hasNextPage = _c[0],\n      setHasNextPage = _c[1];\n\n  var _d = useState(true),\n      loadingChannels = _d[0],\n      setLoadingChannels = _d[1];\n\n  var _e = useState(true),\n      refreshing = _e[0],\n      setRefreshing = _e[1];\n\n  var filterString = useMemo(function () {\n    return JSON.stringify(filters);\n  }, [filters]);\n  var sortString = useMemo(function () {\n    return JSON.stringify(sort);\n  }, [sort]);\n\n  var queryChannels = function (queryType) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var offset, newOptions, channelQueryResponse, newChannels, err_1;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            setError(false);\n\n            if (queryType === 'reload') {\n              setChannels([]);\n              setLoadingChannels(true);\n            }\n\n            setRefreshing(true);\n            offset = queryType === 'reload' ? 0 : channels.length;\n            newOptions = __assign({\n              limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT,\n              offset: offset\n            }, options);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.queryChannels(filters, sort || {}, newOptions)];\n\n          case 2:\n            channelQueryResponse = _b.sent();\n            newChannels = queryType === 'reload' ? channelQueryResponse : __spreadArray(__spreadArray([], channels), channelQueryResponse);\n            setChannels(newChannels);\n            setHasNextPage(channelQueryResponse.length >= newOptions.limit); // Set active channel only on load of first page\n\n            if (!offset && activeChannelHandler) {\n              activeChannelHandler(newChannels, setChannels);\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _b.sent();\n            console.warn(err_1);\n            setError(true);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            setLoadingChannels(false);\n            setRefreshing(false);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  var loadNextPage = function () {\n    queryChannels();\n  };\n\n  useEffect(function () {\n    queryChannels('reload');\n  }, [filterString, sortString]);\n  return {\n    channels: channels,\n    hasNextPage: hasNextPage,\n    loadNextPage: loadNextPage,\n    setChannels: setChannels,\n    status: {\n      error: error,\n      loadingChannels: loadingChannels,\n      refreshing: refreshing\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}