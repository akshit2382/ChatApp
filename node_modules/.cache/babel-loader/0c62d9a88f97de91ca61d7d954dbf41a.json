{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Suspense, useMemo } from 'react';\nimport { getStrippedEmojiData } from '../Channel/emojiData';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedReactionsList = function (props) {\n  var additionalEmojiProps = props.additionalEmojiProps,\n      onClick = props.onClick,\n      propReactionCounts = props.reaction_counts,\n      propReactionOptions = props.reactionOptions,\n      propReactions = props.reactions,\n      _a = props.reverse,\n      reverse = _a === void 0 ? false : _a;\n\n  var _b = useEmojiContext('ReactionsList'),\n      Emoji = _b.Emoji,\n      emojiConfig = _b.emojiConfig;\n\n  var _c = useMessageContext('ReactionsList'),\n      message = _c.message,\n      onReactionListClick = _c.onReactionListClick;\n\n  var _d = emojiConfig || {},\n      defaultMinimalEmojis = _d.defaultMinimalEmojis,\n      fullEmojiData = _d.emojiData,\n      emojiSetDef = _d.emojiSetDef;\n\n  var reactions = propReactions || message.latest_reactions || [];\n  var reactionCounts = propReactionCounts || message.reaction_counts || {};\n  var reactionOptions = propReactionOptions || defaultMinimalEmojis;\n  var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);\n  var emojiData = useMemo(function () {\n    return reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData);\n  }, [fullEmojiData, reactionsAreCustom]);\n  if (!reactions.length) return null;\n\n  var getTotalReactionCount = function () {\n    return Object.values(reactionCounts).reduce(function (total, count) {\n      return total + count;\n    }, 0);\n  };\n\n  var getCurrentMessageReactionTypes = function () {\n    var reactionTypes = [];\n    reactions.forEach(function (_a) {\n      var type = _a.type;\n\n      if (reactionTypes.indexOf(type) === -1) {\n        reactionTypes.push(type);\n      }\n    });\n    return reactionTypes;\n  };\n\n  var getEmojiByReactionType = function (type) {\n    var reactionEmoji = reactionOptions.find(function (option) {\n      return option.id === type;\n    });\n    return reactionEmoji;\n  };\n\n  var getSupportedReactionMap = function () {\n    var reactionMap = {};\n    reactionOptions.forEach(function (_a) {\n      var id = _a.id;\n      return reactionMap[id] = true;\n    });\n    return reactionMap;\n  };\n\n  var messageReactionTypes = getCurrentMessageReactionTypes();\n  var supportedReactionMap = getSupportedReactionMap();\n  var supportedReactionsArePresent = messageReactionTypes.some(function (type) {\n    return supportedReactionMap[type];\n  });\n  if (!supportedReactionsArePresent) return null;\n  return React.createElement(\"div\", {\n    \"aria-label\": 'Reaction list',\n    className: \"str-chat__reaction-list \" + (reverse ? 'str-chat__reaction-list--reverse' : ''),\n    \"data-testid\": 'reaction-list',\n    onClick: onClick || onReactionListClick,\n    onKeyPress: onClick || onReactionListClick,\n    role: 'figure'\n  }, React.createElement(\"ul\", null, messageReactionTypes.map(function (reactionType) {\n    var emojiObject = getEmojiByReactionType(reactionType);\n    return emojiObject ? React.createElement(\"li\", {\n      key: emojiObject.id\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Reactions: \" + reactionType\n    }, React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(Emoji, __assign({\n      data: emojiData,\n      emoji: emojiObject,\n      size: 16\n    }, reactionsAreCustom ? additionalEmojiProps : emojiSetDef))), \"\\u00A0\")) : null;\n  }), React.createElement(\"li\", null, React.createElement(\"span\", {\n    className: 'str-chat__reaction-list--counter'\n  }, getTotalReactionCount()))));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\n\n\nexport var ReactionsList = React.memo(UnMemoizedReactionsList);","map":null,"metadata":{},"sourceType":"module"}