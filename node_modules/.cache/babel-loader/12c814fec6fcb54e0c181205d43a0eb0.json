{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nimport Dayjs from 'dayjs';\nimport calendar from 'dayjs/plugin/calendar';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { getDisplayName } from './utils/getDisplayName';\nDayjs.extend(calendar);\nDayjs.extend(localizedFormat);\nexport var isLanguageSupported = function (language) {\n  var translations = ['de', 'en', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'nl', 'pt', 'ru', 'tr'];\n  return translations.some(function (translation) {\n    return language === translation;\n  });\n};\nexport var isDayOrMoment = function (output) {\n  return output.isSame != null;\n};\nexport var isDate = function (output) {\n  return output.getMonth != null;\n};\nexport var isNumberOrString = function (output) {\n  return typeof output === 'string' || typeof output === 'number';\n};\nexport var TranslationContext = React.createContext({\n  t: function (key) {\n    return key;\n  },\n  tDateTimeParser: function (input) {\n    return Dayjs(input);\n  },\n  userLanguage: 'en'\n});\nexport var TranslationProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(TranslationContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useTranslationContext = function (componentName) {\n  var contextValue = useContext(TranslationContext);\n\n  if (!contextValue) {\n    console.warn(\"The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\nexport var withTranslationContext = function (Component) {\n  var WithTranslationContextComponent = function (props) {\n    var translationContext = useTranslationContext();\n    return React.createElement(Component, __assign({}, props, translationContext));\n  };\n\n  WithTranslationContextComponent.displayName = \"WithTranslationContext\" + getDisplayName(Component);\n  return WithTranslationContextComponent;\n};","map":null,"metadata":{},"sourceType":"module"}