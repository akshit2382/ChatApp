{"ast":null,"code":"import React from 'react';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes } from './dataTypes';\nimport { FileAltIcon, FileArchiveIcon, FileAudioIcon, FileCodeIcon, FileExcelIcon, FileFallbackIcon, FileImageIcon, FilePdfIcon, FilePowerPointIcon, FileVideoIcon, FileWordIcon } from './FileIconSet'; // Partially based on: https://stackoverflow.com/a/4212908/2570866\n\nvar mimeTypeToIconMap = {\n  'application/pdf': FilePdfIcon\n};\n\nfor (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {\n  var type = wordMimeTypes_1[_i];\n  mimeTypeToIconMap[type] = FileWordIcon;\n}\n\nfor (var _a = 0, excelMimeTypes_1 = excelMimeTypes; _a < excelMimeTypes_1.length; _a++) {\n  var type = excelMimeTypes_1[_a];\n  mimeTypeToIconMap[type] = FileExcelIcon;\n}\n\nfor (var _b = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _b < powerpointMimeTypes_1.length; _b++) {\n  var type = powerpointMimeTypes_1[_b];\n  mimeTypeToIconMap[type] = FilePowerPointIcon;\n}\n\nfor (var _c = 0, archiveFileTypes_1 = archiveFileTypes; _c < archiveFileTypes_1.length; _c++) {\n  var type = archiveFileTypes_1[_c];\n  mimeTypeToIconMap[type] = FileArchiveIcon;\n}\n\nfor (var _d = 0, codeFileTypes_1 = codeFileTypes; _d < codeFileTypes_1.length; _d++) {\n  var type = codeFileTypes_1[_d];\n  mimeTypeToIconMap[type] = FileCodeIcon;\n}\n\nfunction mimeTypeToIcon(mimeType) {\n  if (mimeType == null) return FileFallbackIcon;\n  var icon = mimeTypeToIconMap[mimeType];\n  if (icon) return icon;\n  if (mimeType.startsWith('audio/')) return FileAudioIcon;\n  if (mimeType.startsWith('video/')) return FileVideoIcon;\n  if (mimeType.startsWith('image/')) return FileImageIcon;\n  if (mimeType.startsWith('text/')) return FileAltIcon;\n  return FileFallbackIcon;\n}\n\nexport var FileIcon = function (props) {\n  var _a = props.big,\n      big = _a === void 0 ? false : _a,\n      mimeType = props.mimeType,\n      _b = props.size,\n      size = _b === void 0 ? 50 : _b,\n      _c = props.sizeSmall,\n      sizeSmall = _c === void 0 ? 20 : _c;\n  var Icon = mimeTypeToIcon(mimeType);\n  return React.createElement(Icon, {\n    size: big ? size : sizeSmall\n  });\n};","map":null,"metadata":{},"sourceType":"module"}