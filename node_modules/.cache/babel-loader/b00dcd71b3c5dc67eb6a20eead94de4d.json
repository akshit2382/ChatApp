{"ast":null,"code":"'use strict';\n\nconst XmlElement = require('./XmlElement');\n\nconst XmlNode = require('./XmlNode');\n/**\nRepresents an XML document. All elements within the document are descendants of\nthis node.\n\n@public\n*/\n\n\nclass XmlDocument extends XmlNode {\n  /**\n  @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]\n  */\n  constructor(children = []) {\n    super();\n    /**\n    Child nodes of this document.\n     @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}\n    @public\n    */\n\n    this.children = children;\n  }\n\n  get document() {\n    return this;\n  }\n  /**\n  Root element of this document, or `null` if this document is empty.\n   @type {XmlElement?}\n  @public\n  */\n\n\n  get root() {\n    // @ts-ignore\n    return this.children.find(child => child instanceof XmlElement) || null;\n  }\n  /**\n  Text content of this document and all its descendants.\n   @type {string}\n  @public\n  */\n\n\n  get text() {\n    return this.children.map(child => 'text' in child ? child.text : '').join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_DOCUMENT;\n  }\n\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      children: this.children.map(child => child.toJSON())\n    });\n  }\n\n}\n\nmodule.exports = XmlDocument;\n/** @typedef {import('./XmlComment')} XmlComment */\n\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */","map":null,"metadata":{},"sourceType":"script"}