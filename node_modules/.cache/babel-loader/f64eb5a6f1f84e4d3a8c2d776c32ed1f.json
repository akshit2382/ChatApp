{"ast":null,"code":"/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function (params) {\n  var _a, _b, _c;\n\n  var disableDateSeparator = params.disableDateSeparator,\n      hideDeletedMessages = params.hideDeletedMessages,\n      hideNewMessageSeparator = params.hideNewMessageSeparator,\n      lastRead = params.lastRead,\n      messages = params.messages,\n      separateGiphyPreview = params.separateGiphyPreview,\n      setGiphyPreviewMessage = params.setGiphyPreviewMessage,\n      threadList = params.threadList,\n      userId = params.userId;\n  var unread = false;\n  var ephemeralMessagePresent = false;\n  var lastDateSeparator;\n  var newMessages = [];\n\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n\n    if (hideDeletedMessages && message.type === 'deleted') {\n      continue;\n    }\n\n    if (separateGiphyPreview && setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {\n      ephemeralMessagePresent = true;\n      setGiphyPreviewMessage(message);\n      continue;\n    }\n\n    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || '';\n    var prevMessageDate = messageDate;\n    var previousMessage = messages[i - 1];\n\n    if (i > 0 && !disableDateSeparator && !threadList && previousMessage.created_at && isDate(previousMessage.created_at)) {\n      prevMessageDate = previousMessage.created_at.toDateString();\n    }\n\n    if (!unread && !hideNewMessageSeparator && !threadList) {\n      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false; // do not show date separator for current user's messages\n\n      if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id,\n          unread: unread\n        });\n      }\n    }\n\n    if (!disableDateSeparator && !threadList && (i === 0 || messageDate !== prevMessageDate || hideDeletedMessages && ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' && lastDateSeparator !== messageDate) && ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n    ) {\n        lastDateSeparator = messageDate;\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id\n        }, message);\n      } else {\n      newMessages.push(message);\n    }\n  } // clean up the giphy preview component state after a Cancel action\n\n\n  if (separateGiphyPreview && !ephemeralMessagePresent) {\n    setGiphyPreviewMessage === null || setGiphyPreviewMessage === void 0 ? void 0 : setGiphyPreviewMessage(undefined);\n  }\n\n  return newMessages;\n}; // fast since it usually iterates just the last few messages\n\nexport var getLastReceived = function (messages) {\n  for (var i = messages.length - 1; i > 0; i -= 1) {\n    if (messages[i].status === 'received') {\n      return messages[i].id;\n    }\n  }\n\n  return null;\n};\nexport var getReadStates = function (messages, read, returnAllReadData) {\n  if (read === void 0) {\n    read = {};\n  } // create object with empty array for each message id\n\n\n  var readData = {};\n  Object.values(read).forEach(function (readState) {\n    if (!readState.last_read) return;\n    var userLastReadMsgId; // loop messages sent by current user and add read data for other users in channel\n\n    messages.forEach(function (msg) {\n      if (msg.updated_at && msg.updated_at < readState.last_read) {\n        userLastReadMsgId = msg.id; // if true, save other user's read data for all messages they've read\n\n        if (returnAllReadData) {\n          if (!readData[userLastReadMsgId]) {\n            readData[userLastReadMsgId] = [];\n          }\n\n          readData[userLastReadMsgId].push(readState.user);\n        }\n      }\n    }); // if true, only save read data for other user's last read message\n\n    if (userLastReadMsgId && !returnAllReadData) {\n      if (!readData[userLastReadMsgId]) {\n        readData[userLastReadMsgId] = [];\n      }\n\n      readData[userLastReadMsgId].push(readState.user);\n    }\n  });\n  return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n  var newMessages = messages;\n  var intro = {\n    customType: 'channel.intro'\n  }; // if no headerPosition is set, HeaderComponent will go at the top\n\n  if (!headerPosition) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // if no messages, intro gets inserted\n\n\n  if (!newMessages.length) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // else loop over the messages\n\n\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n    var nextMessage = messages[i + 1];\n    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null; // header position is smaller than message time so comes after;\n\n    if (messageTime && messageTime < headerPosition) {\n      // if header position is also smaller than message time continue;\n      if (nextMessageTime && nextMessageTime < headerPosition) {\n        if (messages[i + 1] && messages[i + 1].customType === 'message.date') continue;\n\n        if (!nextMessageTime) {\n          newMessages.push(intro);\n          return newMessages;\n        }\n\n        continue;\n      } else {\n        newMessages.splice(i + 1, 0, intro);\n        return newMessages;\n      }\n    }\n  }\n\n  return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  if (message.customType === 'message.date') return '';\n  if (message.customType === 'channel.intro') return '';\n  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) return 'single';\n  var isTopMessage = !previousMessage || previousMessage.customType === 'channel.intro' || previousMessage.customType === 'message.date' || previousMessage.type === 'system' || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.type === 'error' || previousMessage.deleted_at;\n  var isBottomMessage = !nextMessage || nextMessage.customType === 'message.date' || nextMessage.type === 'system' || nextMessage.customType === 'channel.intro' || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.type === 'error' || nextMessage.deleted_at;\n\n  if (!isTopMessage && !isBottomMessage) {\n    if (message.deleted_at || message.type === 'error') return 'single';\n    return 'middle';\n  }\n\n  if (isBottomMessage) {\n    if (isTopMessage || message.deleted_at || message.type === 'error') return 'single';\n    return 'bottom';\n  }\n\n  if (isTopMessage) return 'top';\n  return '';\n};","map":null,"metadata":{},"sourceType":"module"}