{"ast":null,"code":"import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedMessageOptions = function (props) {\n  var _a = props.ActionsIcon,\n      ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n      _b = props.displayLeft,\n      displayLeft = _b === void 0 ? true : _b,\n      _c = props.displayReplies,\n      displayReplies = _c === void 0 ? true : _c,\n      propHandleOpenThread = props.handleOpenThread,\n      messageWrapperRef = props.messageWrapperRef,\n      _d = props.ReactionIcon,\n      ReactionIcon = _d === void 0 ? DefaultReactionIcon : _d,\n      _e = props.theme,\n      theme = _e === void 0 ? 'simple' : _e,\n      _f = props.ThreadIcon,\n      ThreadIcon = _f === void 0 ? DefaultThreadIcon : _f;\n\n  var _g = useMessageContext('MessageOptions'),\n      customMessageActions = _g.customMessageActions,\n      getMessageActions = _g.getMessageActions,\n      contextHandleOpenThread = _g.handleOpenThread,\n      initialMessage = _g.initialMessage,\n      isMyMessage = _g.isMyMessage,\n      message = _g.message,\n      onReactionListClick = _g.onReactionListClick,\n      threadList = _g.threadList;\n\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions) || !!customMessageActions;\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n\n  if (isMyMessage() && displayLeft) {\n    return React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions\",\n      \"data-testid\": 'message-options-left'\n    }, showActionsBox && React.createElement(MessageActions, {\n      ActionsIcon: ActionsIcon,\n      messageWrapperRef: messageWrapperRef\n    }), shouldShowReplies && React.createElement(\"button\", {\n      \"aria-label\": 'Open Thread',\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n      \"data-testid\": 'thread-action',\n      onClick: handleOpenThread\n    }, React.createElement(ThreadIcon, null)), shouldShowReactions && React.createElement(\"button\", {\n      \"aria-label\": 'Open Reaction Selector',\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n      \"data-testid\": 'message-reaction-action',\n      onClick: onReactionListClick\n    }, React.createElement(ReactionIcon, null)));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions\",\n    \"data-testid\": 'message-options'\n  }, shouldShowReactions && React.createElement(\"button\", {\n    \"aria-label\": 'Open Reaction Selector',\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, null)), shouldShowReplies && React.createElement(\"button\", {\n    \"aria-label\": 'Open Thread',\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, null)), showActionsBox && React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon,\n    messageWrapperRef: messageWrapperRef\n  }));\n};\n\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":null,"metadata":{},"sourceType":"module"}