{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { isDate, isDayOrMoment, isNumberOrString, useTranslationContext } from '../../context/TranslationContext';\nexport var defaultTimestampFormat = 'h:mmA';\nexport var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';\nexport var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';\n\nfunction getDateString(messageCreatedAt, formatDate, calendar, tDateTimeParser, format) {\n  if (!messageCreatedAt || !Date.parse(messageCreatedAt)) {\n    console.warn(notValidDateWarning);\n    return null;\n  }\n\n  if (typeof formatDate === 'function') {\n    return formatDate(new Date(messageCreatedAt));\n  }\n\n  if (!tDateTimeParser) {\n    console.warn(noParsingFunctionWarning);\n    return null;\n  }\n\n  var parsedTime = tDateTimeParser(messageCreatedAt);\n\n  if (isDayOrMoment(parsedTime)) {\n    /**\n     * parsedTime.calendar is guaranteed on the type but is only\n     * available when a user calls dayjs.extend(calendar)\n     */\n    return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);\n  }\n\n  if (isDate(parsedTime)) {\n    return parsedTime.toDateString();\n  }\n\n  if (isNumberOrString(parsedTime)) {\n    return parsedTime;\n  }\n\n  return null;\n}\n\nvar UnMemoizedMessageTimestamp = function (props) {\n  var _a = props.calendar,\n      calendar = _a === void 0 ? false : _a,\n      _b = props.customClass,\n      customClass = _b === void 0 ? '' : _b,\n      _c = props.format,\n      format = _c === void 0 ? defaultTimestampFormat : _c,\n      propMessage = props.message;\n\n  var _d = useMessageContext('MessageTimestamp'),\n      formatDate = _d.formatDate,\n      contextMessage = _d.message;\n\n  var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;\n  var message = propMessage || contextMessage;\n  var createdAt = message.created_at;\n  var when = useMemo(function () {\n    return getDateString(createdAt, formatDate, calendar, tDateTimeParser, format);\n  }, [formatDate, calendar, tDateTimeParser, format, createdAt]);\n  if (!when) return null;\n  return React.createElement(\"time\", {\n    className: customClass,\n    dateTime: createdAt,\n    title: createdAt\n  }, when);\n};\n\nexport var MessageTimestamp = React.memo(UnMemoizedMessageTimestamp);","map":null,"metadata":{},"sourceType":"module"}