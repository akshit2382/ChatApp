{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback, useEffect, useRef } from 'react';\n/**\n * Prevents Chrome hangups\n * See: https://stackoverflow.com/questions/47524205/random-high-content-download-time-in-chrome/47684257#47684257\n */\n\nvar mousewheelListener = function (event) {\n  if (event instanceof WheelEvent && event.deltaY === 1) {\n    event.preventDefault();\n  }\n};\n\nvar calculateTopPosition = function (element) {\n  if (element instanceof HTMLElement) {\n    return element.offsetTop + calculateTopPosition(element.offsetParent);\n  }\n\n  return 0;\n};\n/**\n * Computes by recursively summing offsetTop until an element without offsetParent is reached\n */\n\n\nvar calculateOffset = function (element, scrollTop) {\n  if (!element) {\n    return 0;\n  }\n\n  return calculateTopPosition(element) + (element.offsetHeight - scrollTop - window.innerHeight);\n};\n\nexport var InfiniteScroll = function (props) {\n  var children = props.children,\n      _a = props.element,\n      element = _a === void 0 ? 'div' : _a,\n      _b = props.hasMore,\n      hasMore = _b === void 0 ? false : _b,\n      _c = props.initialLoad,\n      initialLoad = _c === void 0 ? true : _c,\n      _d = props.isLoading,\n      isLoading = _d === void 0 ? false : _d,\n      _e = props.isReverse,\n      isReverse = _e === void 0 ? false : _e,\n      listenToScroll = props.listenToScroll,\n      loader = props.loader,\n      loadMore = props.loadMore,\n      _f = props.threshold,\n      threshold = _f === void 0 ? 250 : _f,\n      _g = props.useCapture,\n      useCapture = _g === void 0 ? false : _g,\n      _h = props.useWindow,\n      useWindow = _h === void 0 ? true : _h,\n      elementProps = __rest(props, [\"children\", \"element\", \"hasMore\", \"initialLoad\", \"isLoading\", \"isReverse\", \"listenToScroll\", \"loader\", \"loadMore\", \"threshold\", \"useCapture\", \"useWindow\"]);\n\n  var scrollComponent = useRef();\n  var scrollListener = useCallback(function () {\n    var element = scrollComponent.current;\n    if (!element) return;\n    var parentElement = element.parentElement;\n    var offset = 0;\n    var reverseOffset = 0;\n\n    if (useWindow) {\n      var doc = document.documentElement || document.body.parentNode || document.body;\n      var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : doc.scrollTop;\n      offset = calculateOffset(element, scrollTop);\n      reverseOffset = scrollTop;\n    } else if (parentElement) {\n      offset = element.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;\n      reverseOffset = parentElement.scrollTop;\n    }\n\n    if (listenToScroll) {\n      listenToScroll(offset, reverseOffset, threshold);\n    } // Here we make sure the element is visible as well as checking the offset\n\n\n    if ((isReverse ? reverseOffset : offset) < Number(threshold) && element.offsetParent !== null && typeof loadMore === 'function' && hasMore) {\n      loadMore();\n    }\n  }, [hasMore, useWindow, isReverse, threshold, listenToScroll, loadMore]);\n  useEffect(function () {\n    var _a;\n\n    var scrollElement = useWindow ? window : (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;\n\n    if (isLoading || !scrollElement) {\n      return function () {\n        return undefined;\n      };\n    }\n\n    scrollElement.addEventListener('scroll', scrollListener, useCapture);\n    scrollElement.addEventListener('resize', scrollListener, useCapture);\n\n    if (initialLoad) {\n      scrollListener();\n    }\n\n    return function () {\n      scrollElement.removeEventListener('scroll', scrollListener, useCapture);\n      scrollElement.removeEventListener('resize', scrollListener, useCapture);\n    };\n  }, [initialLoad, isLoading, scrollListener, useCapture, useWindow]);\n  useEffect(function () {\n    var _a;\n\n    var scrollElement = useWindow ? window : (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;\n\n    if (scrollElement) {\n      scrollElement.addEventListener('wheel', mousewheelListener, {\n        passive: false\n      });\n    }\n\n    return function () {\n      if (scrollElement) {\n        scrollElement.removeEventListener('wheel', mousewheelListener, useCapture);\n      }\n    };\n  }, [useCapture, useWindow]);\n\n  var attributes = __assign(__assign({}, elementProps), {\n    ref: function (element) {\n      scrollComponent.current = element;\n    }\n  });\n\n  var childrenArray = [children];\n\n  if (isLoading && loader) {\n    if (isReverse) {\n      childrenArray.unshift(loader);\n    } else {\n      childrenArray.push(loader);\n    }\n  }\n\n  return React.createElement(element, attributes, childrenArray);\n};","map":null,"metadata":{},"sourceType":"module"}