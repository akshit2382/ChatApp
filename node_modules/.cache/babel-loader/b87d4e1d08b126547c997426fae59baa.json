{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport var useEmojiPicker = function (state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick) {\n  var emojiPickerRef = useRef(null);\n  var closeEmojiPicker = useCallback(function (event) {\n    event.preventDefault();\n\n    if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  }, [emojiPickerRef]);\n  var openEmojiPicker = useCallback(function (event) {\n    event.preventDefault();\n    dispatch({\n      type: 'setEmojiPickerIsOpen',\n      value: true\n    }); // Prevent event from bubbling to document, so the close handler is never called for this event\n\n    event.stopPropagation();\n  }, []);\n\n  var handleEmojiKeyDown = function (event) {\n    if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\n      event.preventDefault();\n      /**\n       * TODO: fix the below at some point because this type casting is wrong\n       * and just forced to not have warnings currently with the unknown casting\n       */\n\n      openEmojiPicker(event);\n    }\n  };\n\n  var handleEmojiEscape = function (event) {\n    if (event.key === 'Escape') {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  };\n\n  useEffect(function () {\n    if (state.emojiPickerIsOpen) {\n      document.addEventListener('click', closeEmojiPicker, false);\n      document.addEventListener('keydown', handleEmojiEscape);\n    }\n\n    return function () {\n      document.removeEventListener('click', closeEmojiPicker, false);\n      document.removeEventListener('keydown', handleEmojiEscape);\n    };\n  }, [closeEmojiPicker, state.emojiPickerIsOpen]);\n  var onSelectEmoji = useCallback(function (emoji) {\n    var _a;\n\n    insertText(emoji.native);\n\n    if (closeEmojiPickerOnClick) {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n\n    (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [insertText]);\n  return {\n    closeEmojiPicker: closeEmojiPicker,\n    emojiPickerRef: emojiPickerRef,\n    handleEmojiKeyDown: handleEmojiKeyDown,\n    onSelectEmoji: onSelectEmoji,\n    openEmojiPicker: openEmojiPicker\n  };\n};","map":null,"metadata":{},"sourceType":"module"}