{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useCallLoadMore } from './hooks/useCallLoadMore';\nimport { useEnrichedMessages } from './hooks/useEnrichedMessages';\nimport { useMessageListElements } from './hooks/useMessageListElements';\nimport { useScrollLocationLogic } from './hooks/useScrollLocationLogic';\nimport { Center } from './Center';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\n\nvar useInternalInfiniteScrollProps = function (props) {\n  var _a = useComponentContext('useInternalInfiniteScrollProps').LoadingIndicator,\n      LoadingIndicator = _a === void 0 ? DefaultLoadingIndicator : _a;\n  return __assign({\n    hasMore: props.hasMore,\n    isLoading: props.loadingMore,\n    loader: React.createElement(Center, {\n      key: 'loadingindicator'\n    }, React.createElement(LoadingIndicator, {\n      size: 20\n    })),\n    loadMore: useCallLoadMore(props.loadMore, props.messageLimit || 100)\n  }, props.internalInfiniteScrollProps);\n};\n\nvar MessageListWithContext = function (props) {\n  var channel = props.channel,\n      _a = props.disableDateSeparator,\n      disableDateSeparator = _a === void 0 ? false : _a,\n      groupStyles = props.groupStyles,\n      _b = props.hideDeletedMessages,\n      hideDeletedMessages = _b === void 0 ? false : _b,\n      _c = props.hideNewMessageSeparator,\n      hideNewMessageSeparator = _c === void 0 ? false : _c,\n      _d = props.messageActions,\n      messageActions = _d === void 0 ? Object.keys(MESSAGE_ACTIONS) : _d,\n      _e = props.messages,\n      messages = _e === void 0 ? [] : _e,\n      notifications = props.notifications,\n      _f = props.noGroupByUser,\n      noGroupByUser = _f === void 0 ? false : _f,\n      _g = props.pinPermissions,\n      pinPermissions = _g === void 0 ? defaultPinPermissions : _g,\n      // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n  _h = props.returnAllReadData,\n      // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n  returnAllReadData = _h === void 0 ? false : _h,\n      _j = props.threadList,\n      threadList = _j === void 0 ? false : _j,\n      _k = props.unsafeHTML,\n      unsafeHTML = _k === void 0 ? false : _k,\n      headerPosition = props.headerPosition,\n      read = props.read;\n  var customClasses = useChatContext('MessageList').customClasses;\n\n  var _l = useComponentContext('MessageList'),\n      _m = _l.EmptyStateIndicator,\n      EmptyStateIndicator = _m === void 0 ? DefaultEmptyStateIndicator : _m,\n      _o = _l.MessageListNotifications,\n      MessageListNotifications = _o === void 0 ? DefaultMessageListNotifications : _o,\n      _p = _l.MessageNotification,\n      MessageNotification = _p === void 0 ? DefaultMessageNotification : _p,\n      _q = _l.TypingIndicator,\n      TypingIndicator = _q === void 0 ? DefaultTypingIndicator : _q;\n\n  var _r = useScrollLocationLogic({\n    messages: messages,\n    scrolledUpThreshold: props.scrolledUpThreshold\n  }),\n      hasNewMessages = _r.hasNewMessages,\n      listRef = _r.listRef,\n      onMessageLoadCaptured = _r.onMessageLoadCaptured,\n      onScroll = _r.onScroll,\n      scrollToBottom = _r.scrollToBottom,\n      wrapperRect = _r.wrapperRect;\n\n  var _s = useEnrichedMessages({\n    channel: channel,\n    disableDateSeparator: disableDateSeparator,\n    groupStyles: groupStyles,\n    headerPosition: headerPosition,\n    hideDeletedMessages: hideDeletedMessages,\n    hideNewMessageSeparator: hideNewMessageSeparator,\n    messages: messages,\n    noGroupByUser: noGroupByUser,\n    threadList: threadList\n  }),\n      messageGroupStyles = _s.messageGroupStyles,\n      enrichedMessages = _s.messages;\n\n  var elements = useMessageListElements({\n    enrichedMessages: enrichedMessages,\n    internalMessageProps: {\n      additionalMessageInputProps: props.additionalMessageInputProps,\n      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n      customMessageActions: props.customMessageActions,\n      disableQuotedMessages: props.disableQuotedMessages,\n      formatDate: props.formatDate,\n      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n      getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n      getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n      Message: props.Message,\n      messageActions: messageActions,\n      messageListRect: wrapperRect,\n      onlySenderCanEdit: props.onlySenderCanEdit,\n      onMentionsClick: props.onMentionsClick,\n      onMentionsHover: props.onMentionsHover,\n      onUserClick: props.onUserClick,\n      onUserHover: props.onUserHover,\n      openThread: props.openThread,\n      pinPermissions: pinPermissions,\n      renderText: props.renderText,\n      retrySendMessage: props.retrySendMessage,\n      unsafeHTML: unsafeHTML\n    },\n    messageGroupStyles: messageGroupStyles,\n    onMessageLoadCaptured: onMessageLoadCaptured,\n    read: read,\n    returnAllReadData: returnAllReadData,\n    threadList: threadList\n  });\n  var finalInternalInfiniteScrollProps = useInternalInfiniteScrollProps(props);\n  var messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || 'str-chat__list';\n  var threadListClass = threadList ? (customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList) || 'str-chat__list--thread' : '';\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: messageListClass + \" \" + threadListClass,\n    onScroll: onScroll,\n    ref: listRef\n  }, !elements.length ? React.createElement(EmptyStateIndicator, {\n    listType: 'message'\n  }) : React.createElement(InfiniteScroll, __assign({\n    className: 'str-chat__reverse-infinite-scroll',\n    \"data-testid\": 'reverse-infinite-scroll',\n    isReverse: true,\n    useWindow: false\n  }, finalInternalInfiniteScrollProps), React.createElement(\"ul\", {\n    className: 'str-chat__ul'\n  }, elements), React.createElement(TypingIndicator, {\n    threadList: threadList\n  }), React.createElement(\"div\", {\n    key: 'bottom'\n  }))), React.createElement(MessageListNotifications, {\n    hasNewMessages: hasNewMessages,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottom\n  }));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\n\n\nexport var MessageList = function (props) {\n  var loadMore = useChannelActionContext('MessageList').loadMore;\n\n  var _a = useChannelStateContext('MessageList'),\n      membersPropToNotPass = _a.members,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n  mutesPropToNotPass = _a.mutes,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n  watchersPropToNotPass = _a.watchers,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n  restChannelStateContext = __rest(_a, [\"members\", \"mutes\", \"watchers\"]);\n\n  return React.createElement(MessageListWithContext, __assign({\n    loadMore: loadMore\n  }, restChannelStateContext, props));\n};","map":null,"metadata":{},"sourceType":"module"}